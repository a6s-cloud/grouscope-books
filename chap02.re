= プロジェクトの管理

//flushright{
Toki（@tokidrill）
//}

=={sec-ext0} プロジェクトマネージメントへの情熱
皆さんはプロジェクトマネージメントに関して、どのような考えを持っていますでしょうか？
プロジェクト管理手法は非常に有用なものが多く確立されており、プロジェクトの性質によって採用される管理手法が異なってきます。
多くのメンバが所属する巨大なプロジェクトでは、全体状況の把握や明確な役割分担を意識してWBSや設計書などのドキュメントを重視するWF型の開発管理手法が採用されることが多いでしょう。
一方、スピードを意識して少数精鋭で行いたいプロジェクトではアジャイル型の開発管理手法が採用されることが多く、スタートアップやベンチャー企業が台頭している今日では、アジャイル型の開発管理手法が話題に挙がることが多い印象を受けます。

私、Tokiは2018年からプログラマとしてエンジニアキャリアをスタートさせ、本書執筆時点(2019年8月)までに5つのプライベートプロジェクトに携わってきました。
マネタイズを目的としたもの、技術の獲得を目的としたもの、できあがったサービスに価値を期待したもの… それぞれのプロジェクトには目的やストーリーがあり、どのプロジェクトも面白く、
最高のメンバが集まって結成されたものだと私は信じていますが、残念ながら頓挫しリリースを待たずに凍結されてしまったプロジェクトもいくつか存在します。
また、私と同じ若手のエンジニアたちと交流を深める中で、プライベートなプロジェクトを持っているがなかなか上手く進めることができずに悩んでいるという声は非常に多く聞いてきました。

はじめに述べたとおりプロジェクトマネージメントの手法は多くのフレームワークが発明されており、それぞれの手法に則って開発を行っていくのが一般的でしょう。
しかし、プライベートなチーム開発プロジェクトでのマネージメントに限っていえば、業務での開発プロジェクトに比べてほとんど研究されていないというのが現状です。
私や私の仲間たちの経験上、無理にマネージメントフレームワークに則ってプロジェクトを進めたり、逆に管理を全く意識せずに開発を進めてしまったりするとチームの疲弊(ゆくゆくの崩壊・凍結)を招きます。
チームやプロジェクトに適した管理手法を試行錯誤し、"いいとこ取り" で管理手法をオーダーメイドしていくことは非常に重要なことであるといえるでしょう。

本章では、プライベートなチーム開発プロジェクトでよくあるマネージメントの上での悩みをどのようにして乗り越えようか、私たちのチームが試行錯誤して辿り着いた方法を、私の考えを交えて紹介します。
ほんの一部分でも、プライベートでチーム開発をしたい皆さんの参考になれば幸いです。

=={sec-ext1} プライベートなプロジェクトを行う上での悩み

まずはプライベートなチームプロジェクトを行う上での悩みや問題点を整理していきましょう。
システム開発のプロジェクトの問題点といえば、初めに思いつくのは技術的な障壁や納期です。
しかし、私はこれらはプライベートなプロジェクトではあまり関係がないものだと考えています。

前者は、技術・経験をつけることが目的である場合が多いため、問題になることは少なく、逆にこのような障壁に出会ったときこそチームを組んだときの醍醐味で、
チームメンバと協力して解決する、多くの時間をかけてしっかりと調べて解決するなど人的・時間的なリソースを多く使うといった、業務ではなかなかできないような方法を取ることができます。
こうして解決した問題は自分自身の自信や経験に繋がりますし、チームとしての成果になるので逆にモチベーションが上がる要因ともいえます。

後者に関しては、そもそもプライベートプロジェクトで厳密な納期を定めているケースは少ないでしょう。
また、私はマネタイズを目的としたプロジェクトにも参加した経験がありますし、サービスを立ち上げて起業を考えている仲間に話を聞いたこともありますが、
納期や期日に関して悩んでいるということはあまり聞いたことがありません。

それではプライベートなチーム開発プロジェクトが頓挫してしまう本質的な原因とはどういったことが挙げられるでしょうか。
私は、開発が頓挫してしまうプロジェクトがチームとして抱えている問題点として主なものは下記のようなものであると考えています。


チームを組んで開発するとき、あるいは顧客を相手に開発するときに(業務・プライベートに関わらず)よく衝突するのが何から手をつけていいのかわからないという問題です。
業務では要件定義や外部設計で仕様を策定し、イメージを擦り込んで行くという工程があることが多いでしょう。
一方、プライベートなプロジェクトでは計画や設計よりも開発が先行している場合や、後入りのメンバに説明がなくコミットのハードルが高くなっている場合が多いように感じています。

開発が始まってから起こりやすいのは現状やっているタスクの解決方法がわからなくなってしまう場合です。
これはどちらかといえば技術的な障壁に近い問題で、チーム間でのコミュニケーションが活発に行われていない場合に発生する問題であると分析しています。
プライベートプロジェクトでは、それぞれ所属の違うメンバが集まっていたり挑戦的な技術を取り入れたりしている場合が多いです。
そういった場合に既存のソースコードなどが自分の所属や理解とは違う思想で記述されているために、「いつも利用しているフレームワークなのに何が書いてあるかわからない」などといった形で発生する場合が多いです。
また、これは開発にコミットする初期の段階で起こる場合が非常に多く、「環境構築ができない」、「独自に定義されたコマンドの利用方法がわからない」などといった形でも発生します。
これらは、メンバ個人が技術力を高めることで解決することも十分に可能ですが、それらのキャッチアップに終止してしまいプロジェクトへのコミットにたどり着かないなどといったケースも見られます。
この問題も、コミュニケーションをしっかり行うことによって十分に解決できる問題です。

本書を手にとっていただいている皆さんの多くは、アルバイト・サラリーマンといった被雇用者にせよ、経営者のような雇用者(もしくは事業主)にせよ、何かしらの形で所属があると思います。
また、家庭を持っている場合、趣味や個人的な活動に打ち込んでいる場合も少なくないでしょう。
番外編として、病気や怪我などで長期的に離脱することも考えられます。
率直にいえば、私はこういった場合はその期間中にコミットしてもらうことは諦めた方がいいケースが多いと考えています。
(実際に私も働きすぎで胃を壊してしまい、一ヶ月ほど何もできなかった時期があります(笑))
この場合は、どうしたらプロジェクトに復帰しやすいかということを考えるのが最も前向きで建設的な施策になるでしょう。

アルバイトや勤務先での業務に対してプライベートプロジェクトでは(マネタイズを目的とした場合があるにせよ)、すぐには利益は発生しづらいことが多いです。
目先の金銭的な利益が得られない場合はやり甲斐や成長にモチベーションが集中しますが、前に述べたような理由でモチベーションが低下することはよくあることです。
また、他のメンバのコミットが上手くいっていない場合、他のメンバに引っ張られて一番のコントリビュータがコミットしなくなってしまうということもよくあることで、
これがチーム、あるいはプロジェクトが崩壊してしまうといった現象の本質であると考えられます。

以上に述べたような問題点を整理すると、私の考えるプライベートでのチーム開発プロジェクトが抱えがちな問題は下記の4点に整理できます。

 1. やるべきことが明確化されておらず、手の付けようがない
 2. 行き詰まったissueが障害になって、開発が進まない
 3. 生活や仕事面で想定外に忙しくなってしまい、コミットできなくなってしまう
 4. モチベーションが維持できない

次節では、これらの問題に対してどのようなアプローチでプロジェクトを進めていけば、悩みを減らすことができるか、私たちがたどり着いたTIPS(コツ)を紹介します。

=={sec-ext2} 解決へのTIPS

=== ミーティングをする
プロジェクトにコミットする上で、何をすべきかを知ることは最も初歩的で重要なことです。
失敗してしまう多くのプライベートなプロジェクトでは、プロジェクトの概要はオーナーの頭の中にあり、メンバーたちはissueが起票されるまで何をすればいいのかがわかりません。
一緒にプロジェクトを進めていく仲間として、認識や価値観を共有して、主体的にプロジェクトにコミットして行くことは、健全なプロジェクトの進行に非常に有効なTIPSになります。

その上で私が一番最初にオススメしたいTIPSは定期的にミーティングを行うことです。
できれば対面で、さもなければビデオ通話がいいでしょう。
ミーティングを行うことでプロジェクトオーナーの頭の中にあったイメージは簡単にメンバーに伝わることになりますし、次のスプリントに向けて足並みを揃えることができます。

定期的に対面でミーティングしよう
モチベーションが保てるし、悩みが解決されるし、次に何をすべきかが明確になるよ

ミーティングをするときはアジェンダを作ろう
ミーティングをするときはアジェンダそれぞれにゴールを定めよう
ミーティング後半はみんなで遊ぼう　ミーティング後のペアプロは問題解決・技術交換の場になるよ

=== 環境はすぐに作ってしまおう

=== 記録を残す

=== 持ち帰りの課題を可視化する

=== 困ったときのissue起票

=== 後から入ってきたメンバーが気持ちよく開発するために

=== 非同期コミュニケーションの障害を越える

=={sec-ext2} issue駆動プロジェクトマネジメントへの誘い