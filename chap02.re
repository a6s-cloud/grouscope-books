= プロジェクトの管理

//flushright{
Toki（@tokidrill）
//}

=={sec-ext0} プロジェクトマネージメントへの情熱
皆さんはプロジェクトマネージメントに関して、どのような考えを持っていますでしょうか？
プロジェクト管理手法は非常に有用なものが多く確立されており、プロジェクトの性質によって採用される管理手法が異なってきます。
多くのメンバが所属する巨大なプロジェクトでは、全体状況の把握や明確な役割分担を意識してWBSや設計書などのドキュメントを重視するウォーターフォール型の開発管理手法が採用されることが多いでしょう。
一方、スピードを意識して少数精鋭で行いたいプロジェクトではアジャイル型の開発管理手法が採用されることが多く、スタートアップやベンチャー企業が台頭している今日では、アジャイル型の開発管理手法が話題に挙がることが多い印象を受けます。

私、Tokiは2018年からプログラマとしてエンジニアキャリアをスタートさせ、本書執筆時点(2019年8月)までに5つのプライベートプロジェクトに携わってきました。
マネタイズを目的としたもの、技術の獲得を目的としたもの、できあがったサービスに価値を期待したもの… それぞれのプロジェクトには目的やストーリーがあり、どのプロジェクトも面白く、
最高のメンバが集まって結成されたものだと私は信じています。ただ、残念ながら頓挫しリリースを待たずに凍結されてしまったプロジェクトもいくつか存在します。
また、私と同じ若手のエンジニアたちと交流を深める中で、プライベートなプロジェクトを持っているがなかなか上手く進めることができずに悩んでいるという声は非常に多く聞いてきました。

はじめに述べたとおりプロジェクトマネージメントの手法は多くのフレームワークが発明されており、それぞれの手法に則って開発を行っていくのが一般的でしょう。
しかし、プライベートなチーム開発プロジェクトでのマネージメントに限っていえば、業務での開発プロジェクトに比べてほとんど研究されていないというのが現状です。
私や私の仲間たちの経験上、無理にマネージメントフレームワークに則ってプロジェクトを進めたり、逆に管理を全く意識せずに開発を進めてしまったりするとチームの疲弊(ゆくゆくの崩壊・凍結)を招きます。
チームやプロジェクトに適した管理手法を試行錯誤し、@<b>{いいとこ取り}で管理手法をオーダーメイドしていくことは非常に重要なことであるといえるでしょう。

本章では、プライベートなチーム開発プロジェクトでよくあるマネージメント上での悩みをどのようにして乗り越えようか、私たちのチームが試行錯誤して辿り着いた方法を、私の考えを交えて紹介します。
ほんの一部分でも、プライベートでチーム開発をしたい皆さんの参考になれば幸いです。

=={sec-ext1} プライベートなプロジェクトを行う上での悩み

まずはプライベートなチームプロジェクトを行う上での悩みや問題点を整理していきましょう。
システム開発のプロジェクトの問題点といえば、初めに思いつくのは技術的な障壁と納期です。
しかし、私はこれらはプライベートなプロジェクトではあまり関係がないものだと考えています。

前者は、技術・経験をつけることが目的である場合が多いため、問題になることは少なく、逆にこのような障壁に出会ったときこそチームを組んだときの醍醐味で、
チームメンバと協力して解決する、多くの時間を掛けてしっかりと調べて解決するなど人的・時間的なリソースを多く使うといった、業務ではなかなかできないような方法を取ることができます。
こうして解決した問題は自分自身の自信や経験に繋がりますし、チームとしての成果になるので逆にモチベーションが上がる要因ともいえます。

後者に関しては、そもそもプライベートプロジェクトで厳密な納期を定めているケースは少ないでしょう。
また、私はマネタイズを目的としたプロジェクトにも参加した経験がありますし、サービスを立ち上げて起業を考えている仲間に話を聞いたこともありますが、
納期や期日に関して悩んでいるということはあまり聞いたことがありません。

それではプライベートなチーム開発プロジェクトが頓挫してしまう本質的な原因とはどういったことが挙げられるでしょうか。
私は、開発が頓挫してしまうプロジェクトがチームとして抱えている問題点として主なものは下記のようなものであると考えています。


チームを組んで開発するとき、あるいは顧客を相手に開発するときに(業務・プライベートに関わらず)よく衝突するのが何から手をつけて良いのかわからないという問題です。
業務では要件定義や外部設計で仕様を策定し、イメージを擦り込んで行くという工程があることが多いでしょう。
一方、プライベートなプロジェクトでは計画や設計よりも開発が先行している場合や、後入りのメンバに説明がなくコミットのハードルが高くなっている場合が多いように感じています。

開発が始まってから起こりやすいのは現状やっているタスクの解決方法がわからなくなってしまう場合です。
これはどちらかといえば技術的な障壁に近い問題で、チーム間でのコミュニケーションが活発に行われていない場合に発生する問題であると分析しています。
プライベートプロジェクトでは、それぞれ所属の違うメンバが集まっていたり、挑戦的な技術を取り入れたりしている場合が多いです。
そういった場合に既存のソースコードなどが自分の所属や理解とは違う思想で記述されているために、「いつも利用しているフレームワークなのに何が書いてあるかわからない」などといった形で発生する場合が多いです。
また、これは開発にコミットする初期の段階で起こる場合が非常に多く、「環境構築ができない」、「独自に定義されたコマンドの利用方法がわからない」などといった形でも発生します。
これらは、メンバ個人が技術力を高めることで解決することも十分に可能ですが、それらのキャッチアップに終止してしまいプロジェクトへのコミットにたどり着かないなどといったケースも見られます。
この問題も、コミュニケーションをしっかり行うことによって十分に解決できる問題です。

本書を手にとっていただいている皆さんの多くは、アルバイト・サラリーマンといった被雇用者にせよ、経営者のような雇用者(もしくは事業主)にせよ、何かしらの形で所属があると思います。
また、家庭を持っている場合、趣味や個人的な活動に打ち込んでいる場合も少なくないでしょう。
番外編として、病気や怪我などで長期的に離脱することも考えられます。
率直にいえば、私はこういった場合はその期間中にコミットしてもらうことは諦めた方がいいケースが多いと考えています。
(実際に私も働きすぎで胃を壊してしまい、一ヶ月ほど何もできなかった時期があります笑)
この場合は、どうしたらプロジェクトに復帰しやすいかということを考えるのが最も前向きで建設的な施策になるでしょう。

アルバイトや勤務先での業務に対してプライベートプロジェクトでは(マネタイズを目的とした場合があるにせよ)、すぐには利益は発生しづらいことが多いです。
目先の金銭的な利益が得られない場合はやり甲斐や成長にモチベーションが集中しますが、前に述べたような理由でモチベーションが低下することはよくあることです。
また、他のメンバのコミットが上手くいっていない場合、他のメンバに引っ張られて一番のコントリビュータがコミットしなくなってしまうということもよくあることで、
これがチーム、あるいはプロジェクトが崩壊してしまうといった現象の本質であると考えられます。

以上に述べたような問題点を整理すると、私の考えるプライベートでのチーム開発プロジェクトが抱えがちな問題は下記の4点に整理できます。

 1. やるべきことが明確化されておらず、手の付けようがない
 2. 行き詰まったissueが障害になって、開発が進まない
 3. 生活や仕事面で想定外に忙しくなってしまい、コミットできなくなってしまう
 4. モチベーションが維持できない

次節では、これらの問題に対してどのようなアプローチでプロジェクトを進めていけば、悩みを減らすことができるか、私たちがたどり着いたTIPS(コツ)を紹介します。

=={sec-ext2} 解決へのTIPS

前節では、プライベートでのチーム開発で私や私の仲間たちが出会った問題を分析して整理しました。
本節では、それらの問題にどのように対応していけばよいかを整理していきます。

=== ミーティングをする
プロジェクトにコミットする上で、何をすべきかを知ることは最も初歩的で重要なことです。
失敗してしまう多くのプライベートなプロジェクトでは、プロジェクトの概要はプロジェクトオーナーの頭の中にあり、メンバーたちはissueが起票されるまで何をすれば良いのかがわかりません。
一緒にプロジェクトを進めていく仲間として、認識や価値観を共有して、主体的にプロジェクトにコミットして行くことは、健全なプロジェクトの進行に非常に有効なTIPSになります。

その上で私が一番最初にオススメしたいTIPSは定期的にミーティングを行うことです。
できれば対面で、難しければビデオ通話でも良いでしょう。
対面でのミーティングを行う際はディスプレイやホワイトボードがレンタルできるコワーキングスペースがオススメです。
私たちは上野、池袋にあるいいオフィス@<fn>{chenv_01}を利用しています。
ミーティングを行うことでプロジェクトオーナーの頭の中にあったイメージは簡単にメンバに伝わることになりますし、次のスプリントに向けて足並みを揃えることができます。

定期的に対面でミーティングを行うことでモチベーションを保つことができますし、もしモチベーションが下がってしまっていた場合にテンションを上げるためのきっかけにもなります。
また、重要なのは次のスプリントに向けての作戦会議と、悩みを共有することです。

前者は、やるべきことが明確化されていないという問題と、忙しくてコミットできないという問題への強力なアプローチになります。
一定期間以上コミットできない状態が続いてしまうと、今のプロジェクトの状況がわからなくなり、プロジェクトに復帰しづらくなります。
また、これは一定期間コミットできなかったメンバだけでなく、開発でなくて次エピックの設計に着手していたメンバや、自分のissueに集中していたメンバにもいえることです。
次のスプリントに向けての作戦会議では、まずは前のスプリントでどのようなissueがクリアされたかをメンバ全員で確認します。
この際、起票されたissueを閲覧しながら担当者が実装した機能の説明や実装時に工夫した点、苦労した点、利用した学習リソースなどを話すと、より有意義なものになります。
また、説明の際はデモサイトなどを用意し、口頭や文書での説明でなく実際に動きを見せて説明を行うことを基本に考えてください。
可能であれば、各々の開発環境で成果をビルドしてデモするのが良いです。
バグや仕様とのズレが発覚することもありますし、改善点や意外な発見がある可能性もあります。
前スプリントでの成果を確認した後は、次スプリントにクリアすべきissueを確認し、振り分けます。
この際、挑戦したいissueがある場合はそのメンバに立候補してもらうのが良いでしょうし、リーダーが推薦するのも良いでしょう。
推薦する場合は、本人にその意思があるかを確認するのを忘れないでください。
個人プロジェクトでは些細なことがモチベーションの低下に繋がるため、これを怠るのは危険です。
また、挑戦したいissueはあるが、自信がない、キャッチアップしなければならないという場合は、そのissueをクリアするだけの知識を持っているメンバに支援を依頼しましょう。
後述しますが、ミーティング後半は自由時間を設けることをオススメしています。その時間を使ってハンズオンしてもらったり、ペアプログラミングでissueに着手したりすると、より効率的にキャッチアップできます。

後者は、行き詰まってしまったissueのハンドリングという点で強力なアプローチになります。
issueを他のメンバに振り分け直すような対応をしても良いですし、前述したように自由時間を使ってキャッチアップを行っても良いです。

ミーティングを行うときは、必ずアジェンダ(つまり議題)を事前に作るようにしてください。
アジェンダを作らない場合、ただ集まっておしゃべりをするだけの会になったり、間延びして充実感のないミーティングを生んでしまいます。

//image[chap02/001_meetingIssue][GitHubでミーティング用のissueを起票し、アジェンダを作成した例]

また、アジェンダにはそれぞれにどうしたらその議題がクリアされるかというゴールを決め、目的を明確にしておきます。
目的が上手く定まっていない、共有されていない場合は、議題が間延びしてしまう可能性が高いため、リーダーはそれぞれに目的を定めておき、議題の最初に目的を話すと良いでしょう。
目的が具体的な成果物として定められる場合、作成したアジェンダに記載しておくのも良い方法です。
更に、アジェンダ一つ一つに時間を掛けすぎないために、それぞれに制限時間を設けておくと成果がでやすくなります。
アイデアを募集するような議題の場合は、ホワイトボードやノート、リアルタイムで文書を共有できるFigmaのようなサービスを用いてブレインストーミングすると効率が良いです。

作成しておいたアジェンダをクリアしたら、ミーティングの後半に入ります。
アジェンダをクリアしたら解散する、各々その場で開発に着手する、などといった選択肢もありますが、せっかく対面で集まっている好機を逃す手はありません。
ミーティングの後半では、プロジェクトのためにキャッチアップしたい技術をハンズオンしたり、複数人で調査を行ったり、担当者にとって困難もしくは億劫なissueをペアプログラミングやモブプログラミングで解決したりします。
私が特にオススメしたいのは、複数人での調査とモブプログラミング@<fn>{chenv_02}です。
これを行うことによって、自分の知らなかったサービスを知ることができたり、キャッチアップの速度と正確さが上がることが見込めます。
所属や文化が違うために生まれてしまうハードルを、上手くプロジェクトに還元してベネフィットとして利用してください。

プライベートなチーム開発プロジェクトにとって、ミーティングは礼拝、アジェンダは聖典です。
ミーティングをしっかり活用することができれば、問題はほぼ解決されたといっても過言でないでしょう。

=== 環境はすぐに作ってしまおう

開発への参入障壁として、誰もがまず最初に思い浮かべるのは開発環境の構築です。
プロジェクトに参加したは良いもののコミットできないというメンバの中には、環境構築ができない、または億劫だという人が多くいます。
技術力に自信があるメンバにとっても、普段扱っている言語やフレームワーク、構成でない場合はコストに感じるものです。
これを持ち帰って各々で対応しようとするとissueの取り掛かりの時期に差が出てしまい、ボトルネックになる可能性が高くなりますし、
環境にバラつきが出て開発途中で問題が発生する可能性もあります。
こういったトラブルは、プロジェクトへのモチベーションの低下に繋がるため、なんとしても除外しなければなりません。

そこで私がオススメするのは、開発開始初期に環境構築のためにミーティングを設定する、もしくは既に設定されているミーティングの中で環境構築に時間を取るいうことです。
こうすることによって、全員が環境構築を完了することを担保することができますし、よりよい開発環境を構築するためにアイデアを出し合うことができるため、環境の洗練や技術力の向上に繋がります。

また、環境構築を行った際は必ずメモを取るようにしてください。
取ったメモはアプリケーションやモジュールのREADMEなどに記載し、リポジトリにpushしておきます。
こうすることで、後から入ってきたメンバの参入障壁もかなり下げることができます。
また、ここでいう「後から入ってきたメンバ」とは、マシンを新品に乗り換えたあなた自身のことかもしれません。
一度作った環境を0から作り直すことの面倒臭さを想像していただければすぐにわかる通り、誰でも簡単に開発に着手する環境を構築できることは非常に重要なことです。

多くの場合は、プロジェクト初期にメンバが構築したものを利用する形になると思いますが、後から入ってきたメンバにとってはGitHubのリポジトリを見せられただけでは環境構築は難しい場合が多いです。
そこで、私たちのチームで行っている取り組みが環境構築用のスクリプトの整備や、DockerHubを利用したオートメイドビルドです。
詳しい説明はつとむさんに譲ります@<fn>{chenv_03}が、この取り組みは私たちのプロジェクトにとって非常にパワフルな働きをしており、
実際に新規メンバが参加した際に3行のコマンドと15分で環境構築が終了したという実績があります。
こういった取り組みによってメンバはアプリケーションの実装に集中することができ、開発中に新しいミドルウェアなどを導入した際にもビルド用のイメージやスクリプトを持っていれば、
プルリクエストで動作確認を依頼する際にも構築のハードルを取り除くことができるため、リズムを乱すことがありません。

//image[chap02/002_build][神降臨の図]

=== 持ち帰りの課題・議論を可視化する

これまでの節では、ミーティングを行い、環境構築を素早く終了し、明確な方針を立て、素早く開発に取り掛かるTIPSを解説しました。
しかし、プロジェクトに新しい技術やメンバにとって挑戦的な技術を取り入れる際は、ミーティング中に全ての方針が定まらないことも多くあります。
こういった場合は課題を持ち帰って調査し、プロジェクトに取り入れるかどうかを判断する必要が出てきます。

ミーティングを行うことの主な目的は、認識を合わせて足並みを揃え、全員がすぐにコミットできるようにすることにありました。
今回のように課題を持ち帰ることになった場合は、メンバ同士を'同期'させるために行っていたミーティングで、逆にメンバ同士でズレが生じる原因を作ってしまいます。
私はこの問題点を整理すると、二つの原因に整理できると考えています。
一つ目は、調査がなかなか進まずその方面の開発が滞ってしまう場合があること。また、それを取り入れるかどうかの議論が適切な頻度、タイミングで行われず、方針が定まるのに時間が掛かってしまう場合があること。
二つ目は、議論に参加していなかったメンバが新しい方針についていけず、その方面の開発にコミットできるメンバが少なくなってしまう可能性があることです。(認識のズレの発生)

これらは、ミーティングを再度行うことによって解決できる問題です。
しかし、ミーティングを毎週のように行うということは開発メンバにとって非常にコストになりますし、手間です。
そこでこのような問題に対応するTIPSとして提案したいのは、生じた課題に対して議論をするスペースを作ることです。
私たちのチームの場合、GitHubに課題調査用または議論用のissueを起票し、そこで議論の記録を残すようなルールを定めています。
下図は、PHPからPythonのバッチを叩く機能を実装する際にその役割分担や開発の方針決定のための調査を行った際に起票されたissueです。

//image[chap02/003_discussIssue][ミーティング中に決まりきらなかった役割分担を議論するissue]

このように課題に対する調査や結果をissueに記載していくことによって多くのメリットが生まれます。
まず、調査の過程を記載していくことにより、進捗を自動的にメンバに報告することができ、方針の転換や決定を素早く行うことができます。
また、このように起票されたissue内で議論を行うことによって、議論や決定事項、その経緯などを細かくまとめて残すことができます。
本書を手にとっていただいている皆さんの多くは、Slackなどを利用して議論を行うことが多いかと思います。
Slackは、細かい議論や素早いディスカッションには向いている反面、ログを残すことには向いていません。
しっかり議論の経緯と結果を残すことによって、実際に開発に取り掛かる際に参考資料として参照するための良いリソースを作ることができ、開発ハードルを下げることができるのです。

=== 困ったときのissue起票

これまでは、開発準備についての解説をしてきました。個人的に開発において、一番のハードルとなるのは開発に着手するまでの準備です。
プライベートでも開発を行うくらい熱心で、開発が大好きな皆さんですから、これまでに解説した方法でしっかりと準備されたプロジェクトにコミットを始めたら、恐らく止まることなく駆け抜けることができるでしょう。
ただし、挑戦的な課題に取り組んでいるときや、開発メンバが作ってくれた資産を利用する際になかなか上手くいかず、開発が滞ってしまう場合があるでしょう。
そういった場合は、恐れず正直に今ぶつかっている困難を開発メンバに質問するのが良いTIPSになります。

例えば、普段は利用していないフレームワークを利用しているときに記述の仕方がわからなくなってしまった場合、どのようなことで悩んでいるかをSlackなどで相談するのが良いでしょう。
あるいは、開発メンバが実装したモジュールの利用方法がわからないとき、こういった場合は使い方を知っているのは開発者だけという場合があります。
無理をしすぎずにしっかりと要点をまとめて開発の補助を依頼することは、質問者自身のみならず、回答したメンバや、プロジェクトのためになることが非常に多いです。

質問を行う場合、細かな質問などはSlackを利用するのが一般的かもしれませんが、ある程度まとまった大きな質問をする場合、私は質問用のissueを起票することをオススメしています。
下図は、私たちのチームで実際に質問用のissueが起票された際の具体例です。

//image[chap02/004_helpWantedIssue][Bashスクリプトの使い方を問い合わせたissue]

これは、つとむさんが作成したBashスクリプトを私のMacで動作させた際に上手くいかず、スクリプトの実装を読みながらデバッグを試みたものの上手くいかなかったときに起票されたissueです。
ちなみにこれは、Linuxで使えるコマンドがMacOSの場合は使えないためにエラーが発生しているというものでしたが、私自身がBashを読むことが得意でないこと、OS操作に詳しくないことなどからなかなか解決することができませんでした。
このような場合は、せっかくチームで開発を行っているのですから、チームメンバを頼るという選択肢があることを忘れないでください。
そして、開発が滞ってしまう時間を少しでも減らすことを意識してください。一度転がり始めた雪玉をどこまで勢いよく転がし続けることができるかは、個人プロジェクトを存続させリリースまで漕ぎ着けるための大きな要因になります。

また、質問をSlackでなく、issueとして起票することにはいくつかのメリットがあります。
一つは、前にも述べたことですが、ログが流れてしまい反応できないということがなくなる点です。
このようなプロジェクトでは、メンバ同士でコミットできる時間帯が違うことが多く、Slackが別の話題で盛り上がってしまうと、追随することが難しくなる場合があります。
issueとして起票しておけばログが流れてしまうかもしれないという危険から課題を隔離することができます。
また、ログが残るということは、将来他のメンバが同じようなところで行き詰まったときに参考にするリソースができるということでもあります。
繰り返しになりますが、他のメンバというのは将来のあなたかもしれません。
個人プロジェクトでは、メンバ同士の知識の差がボトルネックになってしまうことが多いため、こういった学習リソースは可能な限り残し、ここを見ればわかるというリンクのストックを溜めていくことが重要です。

=== issue駆動プロジェクトマネージメントへの誘い

ここまで、プライベートなチーム開発プロジェクトを続けていく上での悩みをどのように解消していくかに焦点を当てて解説を行ってきました。
これまで行ってきた解説の多くで、課題を立てて議論の場を作り、記録を残すということを繰り返し提案してきました。
これが私が今回皆さんにお伝えしたいことの全てで、私はこの手法を'issue駆動プロジェクトマネージメント'と呼んでいます。
開発内容を課題として起票し、それをプルリクエストに紐づけてプロジェクトを動かしていく方法を、'チケット駆動'、'issue駆動'、あるいは'プルリクエスト駆動'と呼ぶことがありますが、
私はこれらの開発手法を議論や問題の整理、リソースの共有全てに拡張して開発を行うことを提唱しています。

'issue駆動プロジェクトマネージメント'はどのタイミングからでも非常に簡単にプロジェクトに取り入れることができます。
この方法を取り入れるときは、下記の3点を守ることを意識してください。

 * issue管理のプラットフォームを利用する
 * 関心事一つ一つに対してissueを起票し、issueを解決することに集中する
 * issue解決の過程をログとして残し、いつでも簡単に閲覧できるようにする

issue管理のプラットフォームとしては、解説でも多く登場し皆さんにもおなじみのGitHub Issuesをオススメします。
Githubはエンジニアが気持ちよく効率的に開発を行うために日々改善が繰り返されていて、issuesはもちろん、リポジトリ、Pull requests、Projects、Wikiといった多くの機能があります。
特に、issues、Pull requests、Wikiはチーム開発を行う上で欠かすことのできない機能です。

issueの起票に関しては、これまでの節で解説してきたことに従えば大抵のことは上手くいくと思います。
これまでの解説を整理すると、下記のようなissueを起票してプロジェクト進行を進めていくことになります。

 * ミーティング用のissue
 * 議論用のissue
 * 質問用のissue
 * 開発タスク振り分け用のissue

上記に列挙された分類は、あくまでシンプルに課題管理を進めていく場合の分類です。
自分たちのチームに合わせてMECEな形にカスタマイズして利用してください。

また、GitHub Issuesでは、Labelを作成し課題に設定することができます。
他の課題管理サービスでも、タグやカテゴリという機能で実装されていることが多いですが、この機能を有効利用することでログの閲覧を簡単にすることができます。
例えば、私たちのプロジェクトでは下記のようなLabelをよく利用しています。

 * meeting
 * discussion
 * help wanted

このようにissueにLabelをつけることで検索することができるようになり、後から閲覧することが非常に簡単になります。
また、issueから得られた知識や解決に利用した学習リソースはGitHub Wikiや、その他のwikiサービスを利用してリンク集にしておくと更に利用することが容易になります。

たったこれだけのちょっとした工夫で、出身業界や異なった技術スタックを持った開発メンバがそれぞれの個性を発揮し、お互いに作用し合うプロジェクトのプラットフォームを作ることができます。
皆さんも是非、'issue駆動プロジェクトマネジメント'を試してみませんか？

=={sec-ext2} 非同期コミュニケーションの壁を越える

これまで、私の経験からの分析を元にしたプロジェクトマネージメントの方法を'issue駆動プロジェクトマネージメント'として解説してきました。
この手法は、プライベートなチーム開発プロジェクトを支えるマネージメントの手法として紹介してきましたが、'非同期コミュニケーションを支えるマネージメントの手法'と言い換えることができます。

エンジニアの業務は開発マシンとインターネットさえあれば、どこでも行うことができるものだと私は考えています。
しかし、業務で開発を行っている方の多くは、会社に行ってチームメンバと対面で開発を行うことが多いというのが現状でしょう。
これは、プロジェクトを進めていく上でいかにメンバ同士の認識を合わせることが困難であるか、いかに問題が生じたときの解決が困難であるかということを表しているといえると考えています。
更にこういった状態に、それぞれのメンバが開発に参加できる長さ・タイミングなどが違う、それぞれのメンバの知識や実力が違うという要因が折り重なると、なかなか上手くプロジェクトが進まなくなってしまうということも納得ができます。
例えば、旅行に行った次の週にMergeされた全てのbranchを確認するのは非常に根気のいる作業です。
あるいは、自分のいないところで決まったプロジェクトの方針は、ただ決定事項だけ伝えられても理解しきるのが難しい場合も多いでしょう。

こういった状況を乗り越えるための一つのアプローチとして、私たちは様々なツール@<fn>{chenv_04}と'issue駆動プロジェクトマネージメント'を利用してきました。
本書で紹介されているツールや手法を利用していけば、きっとよいプロジェクトの土台を作ることができると私は考えています。

また、プロジェクト成功へのもう一つの要因は、よいチームを作ることでしょう。
よいチームとは、お互いを尊敬し、メンバ全員にパッションが溢れている状態を指すと考えています。
チームメンバが尊敬し合い楽しんで行う開発から、成長や経験を獲得し、誰かがちょっと幸せになるようなサービスが生まれるとよいですね。
私たちの経験が、皆さんの充実したプライベートプロジェクトに役立てば幸いです。

//image[myuhu9][][scale=0.2]

//footnote[chenv_01][6.3.1、6.3.2で詳しく紹介しています。]
//footnote[chenv_02][私たちのチームでは、毎回つとむさんにドライバをお願いしてモブプログラミングを行っています。]
//footnote[chenv_03][詳しくは 4 環境構築 で解説されています。]
//footnote[chenv_04][詳しくは 5 利用したサービスやツールの紹介 で解説されています。]
