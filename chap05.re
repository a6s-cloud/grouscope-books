= 環境構築
== Linux 愛好家、Webアプリ畑に立つ
Web アプリ画面を飾りエンドユーザーに魅力的なビジュアルや体験を与えるフロントエンジニア。今話題となっているAngular、React、VueJS を使ったレスポンシブでインタラクティブな画面はユーザのみならず「自分もこんなものを作ってみたい」と開発者の道に入る人も少なくないでしょう。現代のIT 技術者として花形の一種です。一方で真っ暗な画面に白い文字が真夏のスコールのごとく流れてくる中で、それに負けじとキーボードをパタパタ叩いては、また降ってくる文字を見てまたキーボードを叩いていく…。一見すると地味で何が面白いのか理解できなかったりする、でもそんな傍からの視線を気にすることもなく、我が愛するコンピュータとコマンドと通じて直に会話することに虜になっている人もいます。そう、今回環境構築周りをメインに執筆させていただく私、つとむもその虜になってしまった人間のうちのひとりです。

そんな私ですがgrouscope の開発に入ることになりました。どのようにして入ったのか等の経緯はなおとさんの記事に譲るため割愛させていただきます。普段Linux ばかり触っていてLinux の流行を少しは知っているがWeb アプリのことは殆ど知らない属性の人間が、どのようにWeb アプリ開発チームに入って貢献できるだろうかと最初は難しさを感じていました。そんな中で私はバックエンド側の環境構築をメインにやることになり、プロジェクトで採用した技術要素や立ちはだかった壁とその乗り越え方について色々学んでいくものがありました。今回の環境構築の記事はバックエンドがメインとなってしまいますが、私なりに普段フロントエンドで開発をしている方々にも、バックエンドで開発している方々両方にわかりやすく楽しく書いていきたいと思いますので、どうかお付き合いいただければと思います。

== アプリケーションの概要
今回開発するgrouscope はtwitterハッシュタグ分析プラットフォームです。Web 画面に任意のハッシュタグを入力することで、そのハッシュタグがつけられているtweetの傾向を分析し、画像・グラフ・ランキングといった形式に可視化し、hot なハッシュタグを探すことを可能にするものです(GitHub のREADME より一部抜粋し加筆)。今回はフロントエンドとバックエンドでGit リポジトリを分けて開発していくことになりました。

=== フロントエンドの技術要素概要
フロントエンドの技術要素として、ユーザインタフェースを構築するためのJavaScript フレームワークとしてVue.js を採用することになりました。Vue.js は現在日本でも活発に採用されるようになってきてGitHub Start 数も全GitHub リポジトリの中でも有数のものとなってきていて人気とコミュニティの活発さから採用しました。またUI のデザインや色、モーション等をつけるコンポーネントライブラリとしてElement を使用することになりました。こちらはすでになおとさんが実務で利用した経験があるのと使いやすいと評判がありました。またElement もコミュニティが活発で開発が盛んなので採用に至りました。現在は上記のような構成となっていますが、後からデザインの仕事をされているのなとさんが加わったため、現在デザイン及びユーザインタフェースについては大改修中です。その時にはまた利用する技術要素も変わってくるかもしれません。

=== バックエンドの技術要素概要
バックエンドの技術要素として、まずDocker があります。開発期間中は各開発者のPC にプログラムを実行するためのサーバを用意するために使っています。そしてアプリのバックエンドのWeb アプリケーションフレームワークとしてPHP のLaravel を採用しています。今回はLaravel はレンダリングされたWeb 画面をユーザで返す用に使われることもありますが、今回はAPI サーバとしてクライアント側にJSON を返すようにして利用しています。Laravel はAPI 用のフレームワークも用意されているので、API サーバのフレームワークとして使うのも苦ではありません。またDB にはMySQL、Web サーバにはnginx、画像を作成するバッチを実行するためにPython 環境も取り入れています。

//image[chap05/architecture][フロントエンドとバックエンドの技術要素構成図][scale=1.0]

== リポジトリの構成
TODO:

== バックエンドの開発環境としてDocker の選定
御徒町のいいオフィスでgrouscope の開発会議がまだ初期の頃です。
バックエンドの環境を構築する話になりました。普段からLinux を触っている私の頭の中ではDocker を使う選択肢しかありませんでした。やっぱり流行りのDocker なのか…と言われるかもしれませんが、その時私の頭に浮かんでいたDocker を推す理由としては以下のものがありました。

 * 各開発者PC 上に同じ実行環境の提供が可能
 * 環境のリストアが簡単で早い
 * 知名度があり提案しやすい

「開発環境はDocker にしましょう！」提案したところ、やはりみんな普段から勉強しているエンジニアの方々。すんなりとDocker で進める方向に決まりました。しかしDocker を使うというだけではバックエンドのアプリケーションを動かすエンジンを決めただけで、何の言語でどいうったFW(フレームワーク)を動かすかといったことがまだ決まっていません。次はそれらを決めていく必要がありますが、ここで一旦Docker がなぜWeb アプリケーションの開発環境として良いのかといったことについてもう少し詳細に述べさせてください。

=== ポータビリティ
今となってはスタンダードとなっているDockerですが、やはり魅力的でした。その理由のひとつとしてはポータビリティ性とプログラム実行環境の統一化です。VM と比較したDocker (コンテナ)の利点として軽量さが言われることもありますが、今回のケースではそれよりも先にあげたポータビリティの確保とプログラム実行環境の統一化が魅力的でした。

ポータビリティ性を実現するために、各開発者環境に同じDocker イメージを落とすためのいくつかの方法があります。

 1. Docker Hub(registry) にイメージをpush し、メンバにpull してもらう
 2. Docker ファイルを配布してメンバの手元でビルドしてもらう
 3. docker save でコンテナをイメージとして固め、メンバに配布してdocker load してもらう

//image[chap05/0000_DeployDockerImage][Docker イメージ配布方法][scale=1.0]

個人的に推奨したいのは1 番目のDocker Hub 利用する方法です。Docker Hub はある作者が作成したDocker イメージをクラウドで共有して利用できるようにしたサービスです。Docker イメージ作成者はDocker イメージをビルドするための処理が書かれたDockerfile を使ったり、作業中のDocker コンテナをdocker commit してイメージ化したものをDocker Hub にアップロード(push)することで、イメージを公開して配布できるようになります。この本を読んでいる人の中には、Web アプリ開発の環境構築や、Docker を勉強し始めた時に以下のような確認コマンドを実行した経験がある人もいるのではないでしょうか？

//cmd{
$ docker run hello-world
//}

上記docker run コマンドはhello-world イメージからコンテナを起動するコマンドで、Docker が正常にインストールされて起動していれば「Hello from Docker!」とターミナルに表示されます。docker run コマンドは手元に対象のイメージが存在しない場合は手元にそれをpull してから起動するようになっています。そしてこのイメージもDocker Hub 上で管理されています。

//image[chap05/0001_DockerImageHelloWorld][引用 hello-world Docker イメージ(https://hub.docker.com/_/hello-world)][scale=1.0]

このようにインターネットに繋がっていれば、簡単にイメージを取得してきてコンテナを起動することができます。Docker Hub でイメージを管理すればイメージ登録後、イメージ名を伝えることでメンバ間で同じイメージを手元に落としてコンテナを起動することができるようになるのです。

一方でDocker イメージを公開したくない場合はDocker Registry で独自のリポジトリを建てたりDockerfile を配布する方法やdocker save とdocker load を使った方法を利用するのもありだと思います(2019年7月現在、Docker Hub の無料プランで1つまでならプライベートリポジトリは作成可能)。

=== 環境のリストアが簡単で早い
2つ目の理由としてはDocker イメージの普遍性を利用した環境のリストアが簡単な点です。複数メンバらが利用する開発環境として、とても大きな利点があります。例えばそれぞれメンバが開発中のプログラムに対して誤った改修を入れてしまったり、チャレンジングな設定変更をしてデータや環境を破損してしまったとしましょう。自分のマシン上にサーバを直接インストールしていた場合は、サーバの再インストールであったりエラー箇所を追跡して正しく動くように戻す必要があるでしょう。また仮想マシンを単に使っていた場合は、バックアップとして取得しておいたイメージをもう一度コピーして手元に展開し、再起動することで復旧できるかもしれませんが、イメージは数GB 〜 数十GB になることもざらにあり、結構コストが高かったりします。一方Docker ではコンテナを@<b>|削除することで状態をリストアすることができる|のです。

削除することで初期の状態に戻せる、と聞くと何もなくなってしまう用に感じるかもしれませんがこれはどういう意味なのでしょうか？それを知るにはDocker のイメージとコンテナの違いを理解する必要があります。一言で例えていうならばDocker イメージは読み取り専用でDocker コンテナは読み書き両方できるオブジェクトになります。コンテナを起動するとアプリケーションの実行ファイルのような更新が発生しない読み取り・アクセスのみで良いファイルやデータについてはイメージから読み取られ、アプリケーションによってファイルが作成されたりファイルが更新されたりするときは、コンテナ内にそれらを持ってきてコンテナ内の情報のみ変更するようになっているのです。結果としてコンテナ上でファイルの作成や更新が行われようとも、イメージの状態は全く変わっていないのです。そのためユーザーは状態を元に戻したいと思ったら、動いていたコンテナを削除し、もう一度イメージからコンテナを起動し直せばよく、バックアップから大量の情報をコピーしてくるといったコストのかかることはしなくて済むのです。

//image[chap05/0001_FigureOfImageAndContainer][Docker 環境のリストアイメージ][scale=1.0]

==== Docker のイメージとコンテナの性質を体験してみる
TODO:

=={sec-ext1} Laradock を使ったLaravel 環境の構築
トキさんがLaradock を提案してくれた。

=={sec-ext1} フロントエンドとバックエンド、バッチプロジェクトの依存性管理
git submodule を使って複数プログラムの依存性を管理。

=={sec-ext1} 環境カスタマイズ
bash をつかった環境構築スクリプト作成。最初はうまく行っていたが他の人の環境でうまくビルドできない事象発生。黒歴史を語る

=={sec-ext1} デプロイ
AWS、Heroku、GCP、そして自宅サーバ

=={sec-ext1} 俺の環境では動いたのだよ。俺の環境では
Mac/Linux 間での環境差異やLaradock を他プロジェクトで使用していた場合で起きる問題が発生。

=={sec-ext1} Laradock を脱却してDocker Automated Builds の活用してみよう
まずはローカルでDockerfile を作成してビルドしよう。
Python 環境等の独自のカスタマイズが発生する場合は脱却するのもあり。

=={sec-ext1} Dcoker Hub でOrganization を作成しよう
Docker イメージをpush する場所を作成する。

=={sec-ext1} Automated Builds で
他の人のPC 環境に依存しないビルドの強み。

=={sec-ext1} CI
CircleCI、TravisCI

