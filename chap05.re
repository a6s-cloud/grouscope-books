= 環境構築
== Linux 愛好家、Webアプリ畑に立つ
Web アプリ画面を飾りエンドユーザーに魅力的なビジュアルや体験を与えるフロントエンジニア。今話題となっているAngular、React、VueJS を使ったレスポンシブでインタラクティブな画面はユーザのみならず「自分もこんなものを作ってみたい」と開発者の道に入る人も少なくないでしょう。現代のIT 技術者として花形の一種です。一方で真っ暗な画面に白い文字が真夏のスコールのごとく流れてくる中で、それに負けじとキーボードをパタパタ叩いては、また降ってくる文字を見てまたキーボードを叩いていく…。一見すると地味で何が面白いのか理解できなかったりする、でもそんな傍からの視線を気にすることもなく、我が愛するコンピュータとコマンドと通じて直に会話することに虜になっている人もいます。そう、今回環境構築周りをメインに執筆させていただく私、つとむもその虜になってしまった人間のうちのひとりです。

そんな私ですがgrouscope の開発に入ることになりました。どのようにして入ったのか等の経緯はなおとさんの記事に譲るため割愛させていただきます。普段Linux ばかり触っていてLinux の流行を少しは知っているがWeb アプリのことは殆ど知らない属性の人間が、どのようにWeb アプリ開発チームに入って貢献できるだろうかと最初は難しさを感じていました。そんな中で私はバックエンド側の環境構築をメインにやることになり、プロジェクトで採用した技術要素や立ちはだかった壁とその乗り越え方について色々学んでいくものがありました。今回の環境構築の記事はバックエンドがメインとなってしまいますが、私なりに普段フロントエンドで開発をしている方々にも、バックエンドで開発している方々両方にわかりやすく楽しく書いていきたいと思いますので、どうかお付き合いいただければと思います。

== アプリケーションの概要
今回開発するgrouscope はtwitterハッシュタグ分析プラットフォームです。Web 画面に任意のハッシュタグを入力することで、そのハッシュタグがつけられているtweetの傾向を分析し、画像・グラフ・ランキングといった形式に可視化し、hot なハッシュタグを探すことを可能にするものです(GitHub のREADME より一部抜粋し加筆)。今回はフロントエンドとバックエンドでGit リポジトリを分けて開発していくことになりました。

== リポジトリの構成
今回のアプリケーションの概要を話すと

== Laravel の検証環境構成
バックエンドの環境を構築する話になりました。私の頭の中ではDocker を使う選択肢しかありませんでした。Docker の知名度を考えれば皆を説得することも簡単にできるし理解も早いと考えていたからです。
「開発環境はDocker にしましょう！」提案したところ、やはりみんな普段から勉強している強々(つよつよ)のエンジニアの方々。すんなりとDocker で進める方向に決まりました。そして程なくしてイメージはどのように作るかという議題に入りました。やはり合間に進めていくプロジェクトということで時間はあまりかからない方法でやりたいと考えていました。

=={sec-ext1} 検証環境で使う技術要素の選定
Docker が第一候補。

=={sec-ext1} やっぱりDocker なのか
今となってはスタンダードとなっているDockerですが、やはり魅力的でした。その理由のひとつとしては今となっては言うまでもないポータビリティの確保と検証環境の統一化です。VM と比較したDocker (コンテナ)の利点として軽量さやパフォーマンスの側面が取り沙汰されることもありますが、それよりもやはり先に挙げたポータビリティの確保と検証環境の統一化の強みを買っての事でした。配布の方法としては主に以下のような方法があります。

・Docker Hub 又は自前のリポジトリを建ててDockerfile 等を使いイメージをビルドし、さのイメージを置いて各チームメンバに配布する
・Docker ファイルを配布して各チームメンバの手元でビルドしてもらう
・docker save でコンテナをイメージとして固めて各チームメンバに配布、docker load してもらう

一番スタンダードで便利な方法はDocker Hub にアカウントを作成して、そこのリポジトリにイメージをpush する方法だが、イメージを公開したくない、独自のリポジトリを建てるのが手間な場合は(2)、(3)の方法も考慮に入れて良いでしょう(2019年7月現在、Docker Hub の無料プランでも1つまでならプライベートリポジトリは作成可能です)。

[[Docker のシップの図]]

2つ目の理由としてはDocker のスナップショット(イメージ)を使った状態の不変性です。これは様々な開発者が利用する開発環境としてとても大きな利点があります。
各々開発者が開発中のプログラムに対して誤った改修を入れてしまったり、チャレンジングな設定変更をしてデータや状態を破損してしまったとしても、また健全な初期状態に戻すことができるのです。何故健全な初期の状態に戻せるかというと、Docker は読み取り専用で変更不可能なイメージを使い、読み書き可能なコンテナとしてプロセスを起動し、あらゆるファイルの変更をコンテナ内のみにとどめているからです。Docker コンテナ上ではDB やテキストファイルへの書き込みがアプリケーションによって行われることになりますが、それはコンテナ内だけで起こっていることで、イメージには全く影響を及ぼしません。そのためユーザーは状態を元に戻したいと思ったら、動いていたコンテナを停止して削除し、もう一度イメージからコンテナを起動し直せば良く、もう一度検証環境を構築し直す必要がありません。また、イメージをコピーしてバックアップからリストアすることでも環境を戻すことができますが、巨大なイメージのコピーにかかるコストは大きいですが、イメージ(世間一般でいうスナップショット)の場合はコンテナを削除することで状態を元に戻すことができるようになるのです。

[[Docker のイメージとコンテナの図]]

=={sec-ext1} Laradock を使ったLaravel 環境の構築
トキさんがLaradock を提案してくれた。

=={sec-ext1} フロントエンドとバックエンド、バッチプロジェクトの依存性管理
git submodule を使って複数プログラムの依存性を管理。

=={sec-ext1} 環境カスタマイズ
bash をつかった環境構築スクリプト作成。最初はうまく行っていたが他の人の環境でうまくビルドできない事象発生。黒歴史を語る

=={sec-ext1} デプロイ
AWS、Heroku、GCP、そして自宅サーバ

=={sec-ext1} 俺の環境では動いたのだよ。俺の環境では
Mac/Linux 間での環境差異やLaradock を他プロジェクトで使用していた場合で起きる問題が発生。

=={sec-ext1} Laradock を脱却してDocker Automated Builds の活用してみよう
まずはローカルでDockerfile を作成してビルドしよう。
Python 環境等の独自のカスタマイズが発生する場合は脱却するのもあり。

=={sec-ext1} Dcoker Hub でOrganization を作成しよう
Docker イメージをpush する場所を作成する。

=={sec-ext1} Automated Builds で
他の人のPC 環境に依存しないビルドの強み。

=={sec-ext1} CI
CircleCI、TravisCI

