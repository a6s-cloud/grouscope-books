= 利用したサービス紹介

//flushright{
なおと（@naoto_7713）
//}

=={sec-ext0} はじめに
本章ではチーム開発で使用したサービスやツールの紹介をしていきます。

=={sec-ext1} 設計書作成

=== plantUML
無料で次のような図(一例)をコードベースで作成できるサービスです。

 * シーケンス図
 * ユースケース図
 * クラス図
 * アクティビティ図
 * コンポーネント図
 * 状態遷移図
 * オブジェクト図
 * 配置図
 * タイミング図

ER図とシーケンス図で使用しました。
コードベースで図を作成できるため、GitHubでバージョン管理が可能です。
GitHubでは画像差分も確認できるため、plantUMLで作成した図をレビューしやすかったです。

//image[db][GitHubで差分を確認できる][scale=1.0]

=== Draw.io
==== Draw.ioとは
フローチャートやシステム構成図、ネットワーク図を作成できる無料の作図ツールです。
Chrome等のブラウザを使用して作成していきます。
こちらもGitHubのコードベースで管理できます。

次の画像はDraw.ioで書いたものとなります。
アイコンもかなり豊富なのでリッチな画像を作成することができます。

//image[sec-ext1-1][構成図][scale=1.0]

=== cacoo
フローチャートからワイヤーフレーム、プレゼン資料まで作れる「オンライン作図ツール」です。チームで利用するとなると有料になりますが、個人利用なら無料で利用できます。

個人的にはDraw.ioのほうが好きです。

=== Keynote、Google スライド
皆さんがよく知っているプレゼンテーションツールです。
チーム開発の目的やペルソナ、UIをまとめるのに使用しました。
Google スライドだと共有ができるので、作成したリンクをREADMEに貼り付けるのをおすすめします。

=== Google スプレッドシート
こちらもよく知られている表計算ツールです。
DBのテーブル構成を考える時に使用しました。
GitHubで管理できないのが難点ではあります。

//image[sec-ext1-2][テーブル構成][scale=1.0]

=== Swagger UI
API仕様書を作成してくれるサービスです。
SPA構成の場合は先にSwaggerでAPI仕様を決めることで、フロントエンド、バックエンドを並行して作業を進められます。

//image[sec-ext1-3][API仕様書][scale=1.0]

=={sec-ext2} ナレッジ共有
チーム開発では作業の属人化しないように、環境構築の手順やツールの使いた方はドキュメントに残すほうがよいです。

=== kibela
SaaSの情報共有ツールです。
フリープランでは5ユーザーまで無料で使用できます。
画像の組み込みがドラッグ&ドロップで可能な所が便利です。
ただ、管理ツールが増えてしますのが難点ではあります。
僕たちはオープンにできない情報はKibelaに記載するようにしていました。

=== GitHubのプロジェクト内
環境構築や使い方はプロジェクトにドキュメントフォルダを作成して管理していました。プロジェクト内に全てが収まること、差分の確認がしやすいことがメリットです。
画像を入れる際はpathを指定しなければならないのが少し手間ではあります。

=== GitHub Wiki
GitHubにはWikiのページがあります。
しかし、編集がしづらい、差分が分かりづらい、画像を入れづらいなどで正直使いづらかったです。個人的にはプロジェクト内でドキュメントを管理することをおすすめします。

=={sec-ext3} コミュニケーションツール

=== Slack
コミュニケーションツールのデファクトスタンダードですね。
外部ツールとの連携も簡単にできます。

僕たちは次のようなチャンネルを作成していました。
プロジェクトが増えることを想定し、プロジェクト名をプレフィックスにしています。

 * general
 ** 全体的なアナウンスをする時に使用しています
 * random
 ** プロジェクトに関係ない雑談でしようしてます、
 * grouscope_applog
 ** アプリケーションのエラーが発生した場合の通知先のチャネルです。
 * grouscope_backend
 ** バックエンドのリポジトリの通知用チャンネルです。issueやコメント、プルリクの作成時に通知するようにしています。
 * grouscope_batch
 ** バッチのリポジトリの通知用チャンネルです。issueやコメント、プルリクの作成時に通知するようにしています。
 * grouscope_front
 ** フロントの通知用チャンネルです。issueやコメント、プルリクの作成時に通知するようにしています。
 * grouscope_netlify
 ** netlifyのデプロイ状況を通知するチャンネルです。issueやコメント、プルリクの作成時に通知するようにしています。
 * grouscope_デザイン
 ** 画面デザインの話をするチャネルです。デザイナーがJOINしたのをきっかけに作成
 * grouscope_ミーティング
 ** 対面やオンラインMTGする際にスケジュール調整や議事録っぽいのを残すチャンネルする
 * grouscope_開発
 ** プロジェクトの開発に関するを話をするチャンネルです。
 * grouscope_kibela
 ** kibelaで記事の作成やコメントを書いた際に通知するチャネルです。

=== Zoom
オンラインMTGで使用できます。
画面共有もあるので、自分の操作画面を見せながら進めることが可能です。

=={sec-ext4} Git Hub関連
=== Pull Panda
コードレビューワークフローを効率化するためのサービスですです。
次のような機能があります。

 * Pull Reminders
 ** レビュー要求を通知するツール
 * Pull Analytics
 ** コントリビューター情報やプルリク情報を可視化するツール
 * Pull Assigner
 ** コードのレビュー割り当てを自動化するツール

Organizationsアカウントで作成したリポジトリのみと対象になっています。
Qiitaに詳細を書いていますので興味がある方は確認してみてください。

 * 【GitHub】コードレビューツールのPull Pandaを一部触ってみた
 ** https://qiita.com/turmericN/items/095c0318dd14cad71cdc

=== Dependabot
依存パッケージの更新を定期的にチェックし、更新があった際にプルリクエストを作成してくれるサービスです。

こちらもQiitaに詳細を書いていますので興味がある方は確認してみてください。

 * Dependabotで依存パッケージ更新のプルリクを作成してもらう
 ** https://qiita.com/turmericN/items/b4c49bf71b28120f1238

=== organizationアカウント
GitHubでチーム開発をするには次のような方法があります。

 * 個人リポジトリを作成して、メンバーはForkして進める
 * 個人リポジトリを作成して、メンバーにcollaboration権限を付与する
 * organizationアカウントを作成して、メンバーにcollaboration権限を付与する

僕たちは最初、僕のアカウントで作成したリポジトリに、メンバーにcollaboration権限を付与していました。しかし、リポジトリを作成するたび、collaboration権限を付与する作業は手間になっていきました。
そのため、途中からorganizationアカウントに移管しました。
organizationにするとプロフィールにorganizationのアイコンが表示されるためモチベーションも上がるのでおすすめします。

=== Projects
GitHubのProjectsとはカンバン形式のタスクボードです。
これを使用することで現在の進捗がひと目で分かるようになります。
issueやpullrequestにも対応しているのでcloseしたらissueを閉じるなど自動で可能です。

//image[sec-ext1-4][GitHub Projects画面][scale=1.0]

=={sec-ext5} その他

=== hatchful(ロゴメーカー)
無料でオリジナルのロゴを作成できるサービスです。
設問に答えるだけでカッコいいロゴを自動で生成してくれます。
僕たちのロゴもここのサービスで作成しています。

//image[sec-ext1-5][a6s-cloudのロゴ][scale=0.8]

=== みんなでガント
会員登録不要でチームやグループと共有利用が可能なガントチャートを、
簡単に作成できるサービスです。

直感的にガントチャートを作成できたので便利でした。

//image[sec-ext1-6][ガントチャート][scale=1.0]