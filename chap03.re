= 利用したサービスやツールの紹介

//flushright{
なおと（@naoto_7713）
//}

=={sec-ext0} はじめに
現在、開発効率を高めてくれる便利ツールやサービスが沢山でています。
しかし、沢山あるからこそ何を使えばいいのかが迷ってしまう事もあるでしょう。
本章は僕たちが実際に使用したツールやサービスを紹介していきます。

=={sec-ext1} 設計書作成

=== plantUML
plantUMLは次のような図をコードベースで作成できるツールです。

 * シーケンス図
 * ユースケース図
 * クラス図
 * アクティビティ図
 * コンポーネント図
 * 状態遷移図
 * オブジェクト図
 * 配置図
 * タイミング図

//list[?][シーケンス図.pu]{
@startuml putListid
autonumber "[0]"
hide footbox

participant "フロント" as front
participant "Laravel" as api
participant "Twitter" as twitter
participant "DB" as db
participant "バッチ" as python

|||
front -> api : Post /api/v1/analysisRequests
opt バリデーションチェック
  front <-- api : Bad Request(400)
end
loop ツイートを取得
  api -> twitter : apiのcall
  api <-- twitter : 最大100件のツイートを返す
end
api -> api : ツイートを集計
api -> db : ツイートデータを保存
api -> python : wordCloud処理を実行
api -> db : 画像のpath情報を保存
front <-- api : 200を返す

@enduml
//}

//image[sec-ext1-7][シーケンス図][scale=0.8]

図の作成で大きな問題点は、メンテナンスが難しいことです。
シーケンスやER図は追加や更新が発生します。そのため、手軽に修正できるようにしなければなりません。
plantUMLはコードベースのため、画像加工ツールではなくエディタで修正で、メンテナンスが容易です。
GitHubで管理できるのも大きなメリットです。

また、GitHubでは画像差分も確認できるため、plantUMLで作成した図をpngなどに書き出してのレビューもおすすめです。

//image[db][GitHubで差分を確認できる][scale=1.0]

=== Draw.io
==== Draw.ioとは
フローチャートやシステム構成図、ネットワーク図を作成できる無料の作図サービスです。
ChromeやFirefox等のブラウザを使用して作成できます。

次の画像はDraw.ioで書いたものとなります。
AWSのアイコンも豊富なのでリッチなアーキテクチャ図も作成できます。

//image[sec-ext1-1][構成図][scale=1.0]

=== Cacoo
フローチャートからワイヤーフレーム、プレゼン資料まで作れる「オンライン作図ツール」です。
チームで利用すると有料になりますが、個人利用なら無料で利用できます。

ワイヤーフレームを作成する際に使用しましたが、個人的に使い勝手はDraw.ioのほうが好みです。

=== Keynote、Googleスライド
皆さんがよく知っているプレゼンテーションツールです。
チーム開発の目的やペルソナ、ちょっとしたUIを作成する際に使用しました。
GoogleスライドだとURLリンクを発行して、他の人にも共有できます。

=== Googleスプレッドシート
こちらもよく知られている表計算ツールです。
DBのテーブル構成を考える時に使用しました。
しかし、GitHubで管理できないのがメンテナンスされなくなる可能性があります。

//image[sec-ext1-2][テーブル構成][scale=1.0]

=== Swagger UI
API仕様書を作成できるツールです。
SPA構成の場合は先にAPI仕様を決めることで、フロントエンド、バックエンドを並行して作業を進められます。

JSONもしくはYAML形式で記載できます。
JSONはコメントが書けない。ネストが深くなると可読性が下がるのでYAML形式で書くことをおすすめします。

//image[sec-ext1-3][API仕様書][scale=1.0]

=={sec-ext2} ナレッジ共有
チーム開発では作業を属人化させないこと。ナレッジを皆に共有することが大事です。
そのため、環境構築手順やツールの使い方などドキュメントに残していきましょう。

=== kibela
SaaSの情報共有サービスです。
フリープランでは5ユーザーまで無料で利用できます。
画像をドラッグ&ドロップで入れることができるので便利です。
ただ、管理ツールが増えてしまうのがデメリットになります。
僕たちはオープンにできない情報をKibelaに記載するようにしていました。

=== GitHubのプロジェクト内
環境構築や使い方はプロジェクトにドキュメントフォルダを作成して管理していました。プロジェクト内に全てが収まること、差分の確認がしやすいことがメリットです。
画像を入れる際はpathを指定しなければならないのが少し手間ではあります。

=== GitHub Wiki
GitHubにはWikiのページがありますが、編集がしづらい、差分が分かりづらい、画像を入れづらいなど個人的には使いづらかったです。
僕たちはドキュメントに対しては次の考えがあったので、プロジェクト内にドキュメントフォルダを作成し、設計書や環境構築手順を管理していました。

 * ソースとドキュメントは一元管理したい
 * ドキュメントもプルリクでレビューしたい
 * ドキュメントをバージョン管理したい

=={sec-ext3} コミュニケーションツール

=== Slack
コミュニケーションツールのデファクトスタンダードです。
GitHubやkibela等の外部ツール連携も簡単にできます。

チャンネルの区切り方は悩む所ですが、僕たちは次のように作成していました。
プロジェクトが増えることを想定し、プロジェクト名をプレフィックスにしています。

 * general
 ** 全体的なアナウンスをする時に使用しています。
 * random
 ** プロジェクトに関係ない雑談で使用しています。
 * grouscope_applog
 ** アプリケーションのエラーが発生した場合の通知先です。
 * grouscope_backend
 ** バックエンドのリポジトリの通知用です。issueやコメント、プルリクの作成時に通知するようにしています。
 * grouscope_batch
 ** バッチのリポジトリの通知用です。issueやコメント、プルリクの作成時に通知するようにしています。
 * grouscope_front
 ** フロントの通知用です。issueやコメント、プルリクの作成時に通知するようにしています。
 * grouscope_netlify
 ** netlifyのデプロイ状況を通知用です。。issueやコメント、プルリクの作成時に通知するようにしています。
 * grouscope_デザイン
 ** 画面デザインの話をするチャンネルです。
 * grouscope_ミーティング
 ** 対面やオンラインMTGする際にスケジュール調整や議事録を残すチャンネルです。
 * grouscope_開発
 ** プロジェクトの開発に関するを話をするチャンネルです。
 * grouscope_kibela
 ** kibelaで記事の作成やコメントを書いた際に通知するチャネルです。

=== Zoom
オンラインMTGで使用しました。
画面共有もあるので、自分の操作画面を見せながら進めることが可能です。

=={sec-ext4} Git Hub関連
=== Pull Panda
コードレビューワークフローを効率化するためのサービスです。
次のような機能があります。

 * Pull Reminders
 ** レビュー要求を通知するツール
 * Pull Analytics
 ** コントリビューター情報やプルリク情報を可視化するツール
 * Pull Assigner
 ** コードのレビュー割り当てを自動化するツール

Organizationsアカウントで作成したリポジトリのみと対象になっています。
Qiitaに詳細を書いていますので興味がある方は確認してみてください。

 * 【GitHub】コードレビューツールのPull Pandaを一部触ってみた
 ** https://qiita.com/turmericN/items/095c0318dd14cad71cdc

=== Dependabot
依存パッケージの更新を定期的にチェックし、更新があった際にプルリクエストを作成してくれるサービスです。

こちらもQiitaに詳細を書いていますので興味がある方は確認してみてください。

 * Dependabotで依存パッケージ更新のプルリクを作成してもらう
 ** https://qiita.com/turmericN/items/b4c49bf71b28120f1238

=== organizationアカウント
GitHubでチーム開発をするには次のような方法があります。

 * 個人リポジトリを作成して、メンバーはForkして進める
 * 個人リポジトリを作成して、メンバーにcollaboration権限を付与する
 * organizationアカウントを作成して、メンバーにcollaboration権限を付与する

僕たちは最初、個人アカウントで作成したリポジトリに、メンバーにcollaboration権限を付与していました。
しかし、リポジトリを作成するたび、collaboration権限を付与する作業は手間になっていきました。
そのため、途中からorganizationアカウントに移管しました。
organizationにするとプロフィールにorganizationのアイコンが表示されるためモチベーションも上がるのでおすすめです。

=== Projects
GitHubのProjectsとはカンバン形式のタスクボードです。
これを使用することで現在の進捗がひと目で分かるようになります。
issueやpullrequestにも対応しているのでcloseしたらissueを閉じるなど自動で可能です。

//image[sec-ext1-4][GitHub Projects画面][scale=1.0]

=={sec-ext5} その他

=== hatchful(ロゴメーカー)
無料でオリジナルのロゴを作成できるサービスです。
設問に答えるだけでカッコいいロゴを自動で生成してくれます。
僕たちのロゴもここのサービスで作成しています。

//image[sec-ext1-5][a6s-cloudのロゴ][scale=0.8]

=== みんなでガント
会員登録不要でチームやグループと共有利用が可能なガントチャートを、
簡単に作成できるサービスです。

直感的にガントチャートを作成できたので便利でした。

//image[sec-ext1-6][ガントチャート][scale=1.0]