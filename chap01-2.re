= 0から始めるチーム開発の手引

//flushright{
なおと（@naoto_7713）
//}

=={sec2-ext0} はじめに
もし、「今から3人でチーム開発をしてください」と言われたらどうしますか？
最初に何から決めていきますか？作るものでしょうか。それとも使用する技術でしょうか。もしくは進め方でしょうか。

僕も0からプライベートのチーム開発を始めました。仕事でのチーム開発経験ありますが、0から自分で作った経験はありません。
ネットで調べてもプライベートのチーム開発の進め方は体系化されていませんでした。
そんな中を試行錯誤しながらチーム開発を進め、自分の中で手応えがあったものを紹介していきます。

プライベートでチーム開発を初めてみたいけど何をどのように決めていけばいいか分からない人向けの内容となります。

=={sec2-ext1} チーム開発の目的を決めよう
最初にチーム開発の目的を決めていきましょう。
目的を決める理由は、チーム開発で達成したいことを明確化することでメンバーの認識を合わせることです。

例えば、プロダクトを作ってマネタイズしたい人と転職活動のアピールをしたい人がいるとしましょう。プロダクトや設計も終わらせ、いざGitHubにプロジェクトを作成する際に、プロジェクトをPublicにするかPrivateにするかで意見が対立してしまうでしょう。

このように各々目的が違いすぎるとチームとしての意思決定ができなくなってしまいます。そのために、１番初めにチームとしての目的を決め、意思決定をスムーズにすることができます。

例えば、プライベートで集まって開発する目的は下記のようなものが挙げられます。

 * 【スキル志向】技術のスキル向上を目指す
 * 【プロセス志向】チーム開発のプロセスを経験して、チーム作りをしっかりする
 * 【プロダクト志向】プロダクト作りをしっかりして、使ってもらえるサービスを目指す
 * 【成果物志向】転職でアピールできる、成果物を作成する

目的は１つである必要はありません。複数でも問題ありませんが、優先度は確認するのがよいでしょう。

ちなみに、僕たちは「チーム開発の経験を通して、スキルアップを目指す」ことを目的としました。

=={sec2-ext2} 作るものを決めよう
実際に作るものを決めていきましょう。
そんな簡単に作りたいものは浮かばないという人もいることでしょう。
そんな時は、既存システムを真似するような形でいいと思います。

下記サイトに個人開発のサービスが集約されているため、他の人がどんなものを作っているのが分かります。ピンとくるもの探すのも良いでしょう。

 * 開発会議(https://devtalk.jp/)
 * 個人開発のフリマ(https://devmart.jp/)
 * litfire(https://litfire.jp/)

またサービスのアイディアを考える際のアプローチとして次の2つから考えていく方法もあります。

 * 課題解決系
 * エンタメ系

課題解決系とは文字通り不満や課題、願望からプロダクトを考えていくアプローチです。
例えば、勉強会の雰囲気をもっと知りたい。お昼ごはんを自動で決めたい。などの「〜たい」を挙げていく形です。

エンタメ系は、娯楽や面白さを考えていくアプローチです。
アニメ・ゲーム、漫画など新しいものを生み出していく形です。

最初は自分の不満や願望からサービスを考えることができる課題解決系をオススメします。

僕たちがプロダクトは、課題解決系で「勉強会の雰囲気を掴んで、参加するハードルを下げる」サービスにしました。

=={sec2-ext3} ペルソナを作成しよう
作るものが決まったら、ペルソナを作っていきましょう。
ペルソナとは企業や商品の典型的なターゲットとなる顧客像のことです。
しかし、なぜペルソナを作成する必要があるのでしょうか？
それはプロダクトを作成する際に、認識相違を減らすためです。
プライベートでのチーム開発では対面でのコミュニケーションではなく、チャットベースのやり取りとなります。対面であれば細かな確認やジェスチャーが可能ですが、チャットだと文字のみとなります。そのため、自分の考えを伝えるのは対面よりも非常に難しくなります。

僕たちも初めはペルソナを作っていませんでした。そこで発生した問題が画面作成する際に意見がまとまらなくなったことです。
TOP画面の仕様を考えているとき、僕は勉強会の管理者が１番利用するイメージで考え、他のメンバーは勉強会の参加者が利用することを考えていました。
対面で話し合えれば、考えの違いに気付けるかもしれませんがオンラインでは気づきにくいです。

ペルソナを作って認識を合わせるようにしていきましょう。

次は僕たちが実際に作成したペルソナです。

//image[persona][ペルソナ][scale=1.0]

ペルソナは１人の人間を表すので具体的に作成するのがコツです。僕たちは次のようなことを埋めていきました。

 * 名前
 * 年齢
 * 職業
 * 大学
 * 使用言語
 * 家族構成
 * 性格
 * 職場環境
 * 生活環境

この作業は実際にやってみると分かりますが、皆の経験や願望が反映されるので面白いです。
初めての共同作業になるので、皆でワイワイしながら決めていきましょう。

=={sec2-ext4} 使用したい技術を検討しよう
ここは皆の意見が分かれるところでしょう。
Vueがやりたい、Reactがやりたいなど挙がってくると思います。ここで意識したいことはチーム開発の目的に沿った技術選択をすることです。
転職活動のアピールが目的ならば仕事で使われている技術を選択することになりますし、プロダクト作成が目的ならば自分たちの知見のあるものを選択することになるでしょう。

意見が分かれた際は、自分たちで立てたチーム開発の目的を考えましょう。

実際に僕たちが最初に決めた内容は次となります。
フロントエンドやバックエンド、インフラ、開発ツールなど一通りを決めましょう。

 * フロントエンド
 ** 言語: TypeScript
 ** FW: Vue.js
 ** CSS FW: Element
 * バックエンド
 ** 言語: PHP、Python
 ** FW: Laravel
 * インフラ
 ** DB: MySQL
 ** サーバー: NGINX、Docker
 * 開発ツール
 ** コミュニケーションツール: Slack
 ** 仕様書: PlantUML, Swagger, drow.io

=={sec2-ext5} 設計を考えよう
プライベート開発は平日の夜や休日の作業になります。毎日の作業時間が短く、長期的なスケジュールとなっていきます。そのため、考えるフェーズ(設計)と手を動かすフェーズを(実装)は明確に分けていきましょう。

 * 設計 → レビュー → 実装 → レビュー

このような形にすることで、戻りが少なくかつレビューがしやすくなります。

全てはメンバ全員で認識を合わせることを意識して、ドキュメントを作成していきましょう。

==== 機能の洗い出し
まずは必要な機能の洗い出しをしていきましょう。
最初はシンプルに画面単位で考えていくのがおすすめです。
細かい機能はUIを考える際に追加すればよいので、ここでは必要な画面と最低限必要な機能が網羅されているかを注意して書き出していきます。

 * TOP画面
 ** 勉強会一覧を表示する
 ** 勉強会の詳細画面に遷移できる
 ** 勉強会の登録画面に遷移できる

 * 勉強会の詳細画面
 ** 勉強会の詳細情報を表示する
 ** TOP画面に遷移する

==== UI作成
機能洗い出しができたらUIを考えていきましょう。
sketchやAdobe XDのモダンなデザインツールを使用しなければいけないと考えてしまうかもしれませんが、手書きのワイヤレベルでも問題ありません。自分が使い慣れているKeynoteやdrow.ioなどを使用して書いてもよいでしょう。

僕はデザインに関して苦手だったので手書きベースで書いています。

//image[sec2-ext5-1][UIイメージ][scale=0.8]

==== システム構成図
簡単なシステム構成図も作成しておきましょう。
これを書くことで俯瞰して構成を把握できます。

//image[sec2-ext5-2][システム設計図][scale=0.8]

この図では少しざっくりし過ぎている所もあるので、バックエンドの中身をより詳細に書いても良いと思います。

==== データ設計
画面UIを元にデータ設計をしていきましょう。
テーブル設計はPlantUMLでER図を最初に書いて後に、スプレットシートで具体的な項目を書いていくのが僕は好きです。
ER図を先に書くことでテーブルの構造を把握できるため、スプレットシートで直接考えるより戻りが少なくなります。

//image[sec2-ext5-3][ER図][scale=0.8]

//image[sec2-ext5-4][テーブル詳細][scale=1.0]

==== API設計
バックエンドのAPI設計になりますが、下記を設計書に書くことで実装する際に迷うことが少なくなりました。
シーケンス図はplantUMLで下記、API仕様書はSwaggerで書いています。

 * 概要
 * シーケンス図
 * API仕様書
 * ワークフロー

画像を入れる

=={sec2-ext6} 開発流れを決めよう

設計が完了したら開発の進め方を決めていきましょう。
どうしてもプライベートの開発が時間を取りづらくなってしまうので、できるだけ細かくタスク分割して平日でも進めやすいように進めていきましょう。

==== スケジュールを考えよう
ざっくりでもいいのでスケジュールは立ててみましょう。
これは納期厳守という意味ではなく、後から振り替えれるようにするためのものでもあります。
何かを振り返る時に、自分で立てた目標からのギャップから気づきは得ることができます。
例えば早く終わった理由はなんだろうか？遅くなってしまった要因はなんであるのか？等から振り返りかできます。
スケジュール全体はざっくりマイルストーンを作成してみて、個別タスクは各々で立ててもらうのがいいと思います。

スケジュールの画像を入れる

==== タスクは細かくしてissueを作成しよう
タスクは細かくしてissueに追加しておきましょう。
30分程度でプルリクを出せるぐらいの粒度をおすすめとしています。
30分は平日の作業時間を目安としています。

具体的なissueの作り方は設計書をもとの作成していきましょう
 * 解析依頼画面のプロトタイプ作成
 ** 要素とデータと紐付ける
 ** 解析ボタンを押下時にイベントが実行される
 ** 解析ボタン押下時にパラメータを作成
 ** 解析ボタン押下時にリクエストする

GitHubではissueの紐付けができるので、下記のように親issueに足して子issueを紐付けることが可能です。
このようにしておくことで親issueから全体のタスクを把握でき、対応済みと未対応を把握できるようになります。

//image[sec2-ext6-1][ペルソナ][scale=0.8]

ある程度の設計ができあがっている場合は、最初はissueの登録をしていきましょう。

==== 議論はGitHubで行おう
作業を進めていくと確認したいことがでてくると思います。
slackで確認する人が多いと思います。
しかし、僕がおすすめする方法GitHubのコメントでやり取りする方法です。
slackでの確認する問題点としては下記が挙げられます。

 * 会話が流れやすい
 * ログを振り返りづらい
 * クローズドな環境になってしまう

slackは手軽に確認しやすいですが会話が流れやすい特徴があります。そして一度流れてしまった会話は振り返りづらくなります。
さらにGitHubでオープンなプロジェクトにしている場合は、slackで意思決定をすることで結局クローズドになってしまいます。

そのため、少し手間は掛かりますがissueのコメントでやり取りすることで、issueに対しての疑問をまとめて把握できるようになります。
また、この機能はどうやって決められたのかを後から振り返る際もissueとプルリクから確認可能です。
GitHubでやり取りをしているため、オープンなプロジェクトになっていきます。

画像を入れる

自分たちはissueに対する疑問はGithHubでやり取りし、それ以外をslackで対応することを心がけていました。

==== こまめにプルリクを出していこう
プルリクを細かく出す利点は下記が挙げれれます

 * GitHubに草が生える
 * レビュー者の負担が減る

エンジニアとしてモチベーションが上がるのはGitHubに草が生えることではないでしょうか？
プルリクを作成することでGitHubのコントリビュートが増えます。日々の進捗も感じることができるようになるメリットがあります。

さらに、レビュー者の負担が減ります。修正が大きいと、確認作業も時間が掛かっています。
まして自分が知らない技術や内容だとキャッチアップ含めの時間となりました。
そのため、あまりに大きい変更だと全体を確認できずにマージしてしまうこともあります。
できるだけ少ない修正でもプルリクを作成して、レビュー者の負担を減らしてあげることをオススメします。

=={sec2-ext7} 環境を整備しよう
==== プロジェクトを作成しよう
GitHubやGitLabでプロジェクトを作成しましょう。
オープンなプロジェクトの場合はGitHubで問題ないと思います。privateなプロジェクトの場合は無料で使用できるGitLabをオススメしています。
GitHubではorganizationアカウントを作成しての運用もオススメしています。
organizationと聞くと会社の組織のイメージを持ちますが個人でも取得できます。チームのようなイメージで良いです。
個人のプロジェクトの紐付けて置くと、新たにプロジェクトを作成した際に毎回設定からコラボレータを追加する手順が発生します。
organizationアカウントを作成し、予め権限を与えておくことで自分以外の人でもプロジェクトを作成することが可能となります。

さらにプロフィールにorganizationのアイコンも表示されるようになるのでモチベーションもあがります。

==== GitHubとSlackを連携する
GitHubとslackは連携するようにしましょう。
主にGitHubで作業を進めるため、issueやプルリクエストを作成した際にslackへ通知できるようにしたほうが便利です。
連携することで下記のようにプルリク作成時やコメントを追加した場合に通知できるようになります。
やり方はURLをいれる

画像をいれる

==== プルリクのテンプレートを作成しよう
プルリクを作成する際は何を修正して、確認箇所はどこなのかを記載することでレビュー者の負担が減ります。
そのためにプルリクのテンプレートを作成しておきましょう。
やり方のURLを入れる

僕たちは下記のフォーマットを作成しました。

//list[?][ハローワールド]{
# 対応内容
#xx の内容を修正しました。

# 確認方法
〇〇を確認してください。

# クローズするissue
close #xx
close #xx

# このタスクで発生したissue
#xx
#xx

# その他
xxxxxxxxxxx
//}

実際に記入している例が下記となります。

画像を入れる

==== Twitterと連携する
これはモチベーションアップの観点ですが、プルリクをcloseした際などにTwitterに連携できるようにしておくのもよいでしょう。
僕たちもアウトプットをできるだけしていく時に考えた際に、できるだけ手動ではなく自動で運用できるようにするために簡単なツールを作りました。

 * GitHubでプルリクをマージした際にツイートする
 * Slackで特定のリアクションをした際にツイートする

 画像を入れる

 Qiita
  * GitHubのWebhookでプルリクエストをマージした際にツイートできるようしてみた
  ** https://qiita.com/turmericN/items/f6267a75be45c51eaed7
  * Slackでリアクションをした際にツイートできるようにしてみた
  ** https://qiita.com/turmericN/items/23c86d70aae3dd8bfc77

=={sec2-ext8} 最後に
