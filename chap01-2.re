= 個人的なベスト・プラクティス
=={sec2-ext0} はじめに
もし、「今から0ベースでチーム開発してください」と言われたらできるでしょうか？
最初に何から決めていきますか？作るものでしょうか。それとも使用する技術でしょうか。もしくは進め方でしょうか。

僕も0からチーム開発を初めていきました。仕事ではチームで開発経験ありますが、0から作っていく経験はありません。
ネットで調べてもプライベートのチーム開発の進め方は体系化されていませんでした。
そんな中で手探りで進めていき、現状で自分の中でのベストプラクティスを紹介していきます。

プライベートでチーム開発を初めてみたいけど何をどのように決めていけばいいか分からない人向けに書いていきます。

=={sec2-ext1} チーム開発の目的を決めよう
まず初めに、チーム開発の目的を決めていきましょう。
皆それぞれ集まった理由はことなるでしょう。

もし、プロダクトを作りたい人と技術力を向上目指す人いた場合に技術選定で迷うことがあるかもしれません。
早くリリースするなら知見のある技術を選択することになりますし、スキルアップを目指すなら新しいことに挑戦できるかもしれません。
こういう時に軸をどこに置いて意思決定をするかを判断するために目的を決めておきましょう。

例えば、プライベートで集まって開発する目的は下記のようなものが挙げられます。

 * 技術のスキル向上を目指す
 * チーム開発のプロセスを経験して、チーム作りをしっかりする
 * プロダクト作りをしっかりして、使ってもらえるサービスを目指す
 * 転職でアピールできる、成果物を作成する

目的は１つである必要はありません。
複数あっても問題ありませんが、意思決定する際の優先度は決めておくのがよいでしょう。

僕たちは「チーム開発を通して、スキルアップを目指す」を目的としました。

=={sec2-ext2} 作るものを決めよう
実際に作るものを決めていきましょう。
ただ、そんな簡単に作りたいものは浮かばないという人もいることでしょう。
それならば、最初は既存システムを真似するような形でもいいと思います。

下記サイトに個人開発のサービスが集約されているため、他の人がどんなものを作っているのが分かります。
ここを最初に覗いてから、ピンとくるものをまずは真似るのがいいでしょう。

 * 開発会議(https://devtalk.jp/)
 * 個人開発のフリマ(https://devmart.jp/)
 * litfire(https://litfire.jp/)

またアイディアを考える際のアプローチとして下記のような2つの方向から考えることも可能です。

 * 課題解決系
 * エンタメ系

課題解決系とは文字通り不満や課題、願望からプロダクトを考えていくアプローチです。
例えば、勉強会の雰囲気をもっと知りたい。お昼ごはんを自動で決めたい。などの「〜たい」を挙げていく形です。
このアプローチだと自分の不満や願望からサービスを考えることができるので、取っ付き易いと思います。

エンタメ系は課題解決とは違い、娯楽や面白さを考えていくアプローチです。
分かりやすいのがゲームとかになるでしょうか。

作るもののアイディアが思い浮かばない人は多くのサービスを見て、課題解決系とエンタメ系どちらにするかを考えてみましょう。

僕たちは課題解決で「勉強会の雰囲気を掴んで、参加するハードルを下げたい」という感じで作るものを決めました。

=={sec2-ext3} ペルソナを作成しよう
作るものが決まったら、ペルソナを作っていきましょう。
ペルソナとは企業や商品の典型的なターゲットとなる顧客像のことです。
なぜこれが必要なんでしょうか？それはコミュニケーションのコストを下げるためです。
プライベートでのチーム開発では対面でのコミュニケーションを取るのが難しくなり、自分の考えを皆に知ってもらうことが難しくなっていきます。
チャットのテキストベースだとなおさら伝わりにくいでしす。
例えば、Web画面を作成するときをイメージしてみましょう。自分はこの画面を操作する人を男性で年齢は50代で考えているとしましょう。
しかし、他の人は女性の20代で考えている場合、ターゲットイメージが異なり画面の構成も変わってくるかもしれません。
そしてこのようなターゲットユーザなどの前提条件は意外と認識をすり合わせずに進んでいくことが多いです。
このように進めると確認作業する際のコミュニケーションでも噛み合わなくなりますし、決める時も軸がブレてしまう可能性があります。

そのため、ペルソナを作成して皆が想定するユーザを一致させることで、認識の齟齬を減らしていきましょう。
ペルソナは氏名や年齢、居住地、職業、年齢、価値観やライフスタイル、身体的特徴までのかなり細かい情報を盛り混んでいきます。
そして作成する際は具体的に決めていくことが大事です。

僕らは下記の項目を作成していきました。

 * 名前
 * 年齢
 * 職業
 * 大学
 * 使用言語
 * 家族構成
 * 性格
 * 職場環境
 * 生活環境

//image[persona][ペルソナ][scale=0.8]

この作業は皆で共同して作業する形式になっていくため、アイスブレイクにもなり、一体感も生まれていきます。
ぜひ、やってみてください。

=={sec2-ext4} 使用したい技術を検討しよう
個人開発の良い所は制約なしで自分の好きなものや、やってみたい技術を選択することができます。
これが仕事の場合、簡単に技術を決めることはできないと思います。
納期や品質、チームメンバーのスキルなど複数のパラメータがある中で決める必要があるため自分が好きだからややってみたいだけでは決めることは難しいです。

僕らはホワイトボードで書き出していきました。

//image[design2][技術][scale=0.8]

まとめると下記のようにになります。

 * フロントエンド
 ** 言語: TypeScript
 ** FW: Vue.js
 ** CSS FW: Element
 * バックエンド
 ** 言語: PHP、Python
 ** FW: Laravel
 * インフラ
 ** DB: MySQL
 ** サーバー: NGINX、Docker
 * 開発ツール
 ** コミュニケーションツール: Slack
 ** 仕様書: PlantUML

=={sec2-ext5} 設計を考えよう
設計を考えよう
人数が3人以上の場合は設計書を作成していきましょう。
設計書を作成することで実装が明確になりますし、どこが未実装なのかも把握できます。
そしてレビューの際は設計書と見比べて確認することができるのでレビュー者の負担も減ります。
設計書なしではレビューは見るべき箇所が分からずレビュー者の負担も増えてしまいます。

==== 機能の洗い出し
まずは必要な機能の洗い出しをしていきましょう。
最初はシンプルに画面単位で考えていくのがおすすめです。
細かい機能はUIを考える際に追加する形になるため、ここでは必要な画面と最低限必要な機能が網羅されているかを注意して書き出していきます。

 * TOP画面
 ** 勉強会一覧を表示する
 ** 勉強会の詳細画面に遷移できる
 ** 勉強会の登録画面に遷移できる

 * 勉強会の詳細画面
 ** 勉強会の詳細情報を表示する
 ** TOP画面に遷移する

==== UI作成
機能洗い出しができたらUIを考えていきましょう。
sketchやAdobe XDのモダンなデザインツールを使用しなければいけないと考えてしまうかもしれませんが、手書きのワイヤレベルでも問題ありません。
僕もデザインスキルがなかったので一先ず手書きでワイヤーを作成しました。
ワイヤーレベルならkeynoteやdrow.ioなどを使用して書いてもよいでしょう。
ここで注意することは機能洗い出しした所を詳細に記載することです。
例えば勉強会一覧を表示するならば、画像やタイトル、日付などの何を表示するかを落とし込んでいきましょう。

画像をいれる

==== システム構成図
簡単なシステム構成図も作成しておきましょう。これを書くことで俯瞰して構成を把握できます。

画像を入れる

==== データ設計
洗い出した項目を元にデータ設計をしていきましょう。
テーブル設計はPlantUMLでER図を最初に書いて後に、スプレットシートで具体的な項目を書いていくのが僕は好きです。
ER図を先に書くことでテーブルの構造を把握できるため、スプレットシートで直接考えるより戻りが少なくなります。

画像を入れる

==== API設計
バックエンドのAPI設計になりますが、下記を設計書に書くことで実装する際に迷うことが少なくなりました。
シーケンス図はplantUMLで下記、API仕様書はSwaggerで書いています。

 * 概要
 * シーケンス図
 * API仕様書
 * ワークフロー

画像を入れる

=={sec2-ext6} 開発流れを決めよう

設計が完了したら開発の進め方を決めていきましょう。
どうしてもプライベートの開発が時間を取りづらくなってしまうので、できるだけ細かくタスク分割して平日でも進めやすいように進めていきましょう。

==== スケジュールを考えよう
ざっくりでもいいのでスケジュールは立ててみましょう。
これは納期厳守という意味ではなく、後から振り替えれるようにするためのものでもあります。
何かを振り返る時に、自分で立てた目標からのギャップから気づきは得ることができます。
例えば早く終わった理由はなんだろうか？遅くなってしまった要因はなんであるのか？等から振り返りかできます。
スケジュール全体はざっくりマイルストーンを作成してみて、個別タスクは各々で立ててもらうのがいいと思います。

スケジュールの画像を入れる

==== タスクは細かくしてissueを作成しよう
タスクは細かくしてissueに追加しておきましょう。
30分程度でプルリクを出せるぐらいの粒度をおすすめとしています。
30分は平日の作業時間を目安としています。

具体的なissueの作り方は設計書をもとの作成していきましょう
 * 解析依頼画面のプロトタイプ作成
 ** 要素とデータと紐付ける
 ** 解析ボタンを押下時にイベントが実行される
 ** 解析ボタン押下時にパラメータを作成
 ** 解析ボタン押下時にリクエストする

GitHubではissueの紐付けができるので、下記のように親issueに足して子issueを紐付けることが可能です。
このようにしておくことで親issueから全体のタスクを把握でき、対応済みと未対応を把握できるようになります。

//image[sec2-ext6-1][ペルソナ][scale=0.8]

ある程度の設計ができあがっている場合は、最初はissueの登録をしていきましょう。

==== 議論はGitHubで行おう
作業を進めていくと確認したいことがでてくると思います。
slackで確認する人が多いと思います。
しかし、僕がおすすめする方法GitHubのコメントでやり取りする方法です。
slackでの確認する問題点としては下記が挙げられます。

 * 会話が流れやすい
 * ログを振り返りづらい
 * クローズドな環境になってしまう

slackは手軽に確認しやすいですが会話が流れやすい特徴があります。そして一度流れてしまった会話は振り返りづらくなります。
さらにGitHubでオープンなプロジェクトにしている場合は、slackで意思決定をすることで結局クローズドになってしまいます。

そのため、少し手間は掛かりますがissueのコメントでやり取りすることで、issueに対しての疑問をまとめて把握できるようになります。
また、この機能はどうやって決められたのかを後から振り返る際もissueとプルリクから確認可能です。
GitHubでやり取りをしているため、オープンなプロジェクトになっていきます。

画像を入れる

自分たちはissueに対する疑問はGithHubでやり取りし、それ以外をslackで対応することを心がけていました。

==== こまめにプルリクを出していこう
プルリクを細かく出す利点は下記が挙げれれます

 * GitHubに草が生える
 * レビュー者の負担が減る

エンジニアとしてモチベーションが上がるのはGitHubに草が生えることではないでしょうか？
プルリクを作成することでGitHubのコントリビュートが増えます。日々の進捗も感じることができるようになるメリットがあります。

さらに、レビュー者の負担が減ります。修正が大きいと、確認作業も時間が掛かっています。
まして自分が知らない技術や内容だとキャッチアップ含めの時間となりました。
そのため、あまりに大きい変更だと全体を確認できずにマージしてしまうこともあります。
できるだけ少ない修正でもプルリクを作成して、レビュー者の負担を減らしてあげることをオススメします。

=={sec2-ext7} 環境を整備しよう
==== プロジェクトを作成しよう
GitHubやGitLabでプロジェクトを作成しましょう。
オープンなプロジェクトの場合はGitHubで問題ないと思います。privateなプロジェクトの場合は無料で使用できるGitLabをオススメしています。
GitHubではorganizationアカウントを作成しての運用もオススメしています。
organizationと聞くと会社の組織のイメージを持ちますが個人でも取得できます。チームのようなイメージで良いです。
個人のプロジェクトの紐付けて置くと、新たにプロジェクトを作成した際に毎回設定からコラボレータを追加する手順が発生します。
organizationアカウントを作成し、予め権限を与えておくことで自分以外の人でもプロジェクトを作成することが可能となります。

さらにプロフィールにorganizationのアイコンも表示されるようになるのでモチベーションもあがります。

==== GitHubとSlackを連携する
GitHubとslackは連携するようにしましょう。
主にGitHubで作業を進めるため、issueやプルリクエストを作成した際にslackへ通知できるようにしたほうが便利です。
連携することで下記のようにプルリク作成時やコメントを追加した場合に通知できるようになります。
やり方はURLをいれる

画像をいれる

==== プルリクのテンプレートを作成しよう
プルリクを作成する際は何を修正して、確認箇所はどこなのかを記載することでレビュー者の負担が減ります。
そのためにプルリクのテンプレートを作成しておきましょう。
やり方のURLを入れる

僕たちは下記のフォーマットを作成しました。

//list[?][ハローワールド]{
# 対応内容
#xx の内容を修正しました。

# 確認方法
〇〇を確認してください。

# クローズするissue
close #xx
close #xx

# このタスクで発生したissue
#xx
#xx

# その他
xxxxxxxxxxx
//}

実際に記入している例が下記となります。

画像を入れる

==== Twitterと連携する
これはモチベーションアップの観点ですが、プルリクをcloseした際などにTwitterに連携できるようにしておくのもよいでしょう。
僕たちもアウトプットをできるだけしていく時に考えた際に、できるだけ手動ではなく自動で運用できるようにするために簡単なツールを作りました。

 * GitHubでプルリクをマージした際にツイートする
 * Slackで特定のリアクションをした際にツイートする

 画像を入れる

 Qiita
  * GitHubのWebhookでプルリクエストをマージした際にツイートできるようしてみた
  ** https://qiita.com/turmericN/items/f6267a75be45c51eaed7
  * Slackでリアクションをした際にツイートできるようにしてみた
  ** https://qiita.com/turmericN/items/23c86d70aae3dd8bfc77

=={sec2-ext8} 最後に
