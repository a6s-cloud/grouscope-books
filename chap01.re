= プライベートでチーム開発した振り返り
とりあえず文字を埋めている段階です。

=={sec1-ext1} はじめに
皆さんはプライベートでチーム開発したことがありますか？

やったことがある人は個人開発との違いはどう感じましたか？

やったことがない人はチーム開発をやってみたいと思いますか？

僕は2019年2月からプライベートでチーム開発を始めました。
知見も経験もない中て手探りで始めました。上手くいったこと、上手くいかなかったことが沢山あります。

そこで本章では下記のような僕(なおと)の感情面にフォーカスしてチーム開発はどうだったかについて振り返っていきます。

 * なぜ始めようと思ったの？
 * チーム開発は想像以上に難しかった
 * チーム開発だからといってモチベーションは保てるわけでない
 * ルール決めをしないと進んでいかない
 * 中途半端な状態で進まなくなるとメンバの関係も気まずくなる
 * １人では時間が掛かることも、協力するとすぐにできる
 * やっぱり皆で作って行く感じは楽しい

ぜひ読んで頂いた皆さんには僕が経験したプライベートでのチーム開発の雰囲気が伝われば嬉しいです。

=={sec1-ext2} プライベートでチーム開発をしたいと思ったきっかけ
僕は今までWebアプリをリリースなどはしていませんが、個人で勉強や開発をしていました。
何度も個人アプリを作成してみたいと考えましたが、Webアプリひとつ考えても、下記のようなことをを考える必要があります。

 * アプリ内容の設計
 * 画面設計、DB設計
 * フロント実装
 * バックエンド実装
 * インフラ周りの構築

自分に知見がある所はイメージできますが、それ以外は手探りで初めていくことになります。
最初は熱が高くても、時間とともに熱は下がっていきます。知見がない箇所は調べながら進んでいくので時間が掛かります。
中々進捗がでない時は熱は急激に下がっていきます。
そして個人開発の良い所(?)は途中で投げ出しても誰にも迷惑が掛からないことです。
このような感じで中途半端な状態のアプリが沢山できあがりました。

そんな中でQiitaやブログの記事で「共同開発してアプリを作りました」を読んで自分もやってみたい！！
チーム開発をすればモチベーションも保てて、楽しくできるんじゃないかと考えたのがきっかけです。

最初の頃、僕は下記のイメージを持っていました。

 * わいわいできて楽しそう
 * レビューなどをしてスキルが上がりそう
 * 他の人がいることでモチベーションが続きそう

=={sec1-ext3} どうやって人を集めよう？
やってみよう！！と考えても始められないのがチーム開発です。当たり前ですが自分以外の人が存在してチームとなります。
まずは一緒にやってくれる人を探さなければいけません。
しかしそんな簡単に声を掛けられません。断られたらどうしよう？しっかりした計画もないのにやってみたいだけで声を考えても迷惑なのでは？自分と合わない人だったらどうしよう。などを僕は考えてしまうタイプでした。身近な人に声を掛けることも考えましたが、身近な人だからこそ中途半端になって気まずくなったら嫌だと考えていました。

そこで最初は勉強会のLTで声を掛けてみようと考えました。
なぜLTだったのかは、勉強会に参加する人なら勉強熱心であるという感じがしたからです。スキルに関して一緒に高めていくことは可能ですが、勉強に対しての意識を変えていくのは中々大変です。そして声を掛けてくれたのがTokiさんでした。

最初は２人で始める予定でしたが、１人から２人になったことで勇気も出てきてtwitterでつとむさんにも声を掛けました。
そして３人でのチーム開発の一歩を踏み出していきました。

=={sec1-ext4} 熱が高いうちに集まって作るものを決めよう
人も集まったので熱が高いうちに集まって作るものを決めてきました。
最初に決めたのはチーム開発の目的です。
目的を考える理由はチーム開発する上でそれぞれ何を得たいのかを共有する必要があると考えたからです。
例えばプライベートでチーム開発といっても下記のような考えがでてきます

 * 仕事ではチーム開発できていないから経験したい
 * モダンな技術をつかってみたい
 * 転職活動などでアピールできる成果物がほしい
 * ０から開発してリリースしたい
 * 会社での経験が外でも通用するかを試してみたい
 * プロダクトを成功させて利益を得たい

 目的によって選択する技術もことなります。もしプロダクトを成功させたいが目的ならば早めにリリースしてPDCAを回すのがよいです。そうなると技術は皆が知見のあるものを選択したほうがいいですし、チーム開発を経験したいが目的の場合は開発フローを整備するフローになっていきます。

そして僕たちは「チーム開発の経験を通してスキル向上を目指す」という目的になりました。
面白いことにSIerやWeb系、ベンチャー等経験分野が違います。
皆が経験してきたことが外でも上手くいくかを通用するかが分かれば面白いよねと話していました。

目的が決まったらの次は作るものです。もともと僕が個人的に遊んでいてWordCloudをWebアプリにしたいと考えていました。
勉強会のツイートを可視化して、反響や傾向が分かれば参加もしやすくなると思ったからです。
そして作るものはツイート分析アプリになりました。

よしこれで目的も作るものも決まった、技術を決めていく段階です。
目的は技術スキル向上なので、この使用技術を決めていく作業はとても楽しかったです。知見がなくても使ってみたい技術を皆で出し合って行きました。Vue,TypeScript,Laravel,Dockerなどをやってみたい技術を選択しました。

後は設計周りを決める必要がありました。比較的は目的や作るもの、技術をスイスイ決まったのですが設計で時間がかかりました。
機能設計・UIなどはうまく考えられず時間が掛かりました。そのため中々開発を進めることができずにモチベーションも下がっていきます。
とりあえず手を動かせる状態にするために、簡単な手書きの画面をイメージを決め、それを元にDB設計、API設計をしていきました。
この作業は作りたいもののイメージがあった僕が担当しました。画面設計やDB設計もレビュー依頼をお願いしていましたが、詳細な要件やイメージを共有できなかったので依頼されても見るべき箇所が分からず大変だった思います。

ただなにはともあれ、簡単な設計もできたので一番楽しい開発に移りました。

=={sec1-ext5} モチベーションを維持することは難しい

決めるものは決めた！！これであとは開発するだけだ！！と思っていました。

しかしそんな簡単にことは上手くいきませんでした。やはりモチベーションは下がっていきます。
僕の中で分析したことを紹介していきます。

=== 金銭的なインセンティブがない
このプロダクトを成功させたら報酬を得ることができる。
このような、金銭の報酬は短期的には強いモチベーションとなります。
しかし、今回は金銭のインセンティブはありません。こういった中で大事なので内向的モチベーションをが大事です。
内向的モチベーションとは〇〇です。こういった事を自分の中で立てる必要があります。

=== 時間的な制約がある
どんなにモチベーションが高くても、時間が経つとモチベーションは下がっていきます。
プライベートでの開発はどうしても時間が細切れになってしまし、長期的なスパンになってしまいます。
僕の生活リズムだと平日は最大2時間、平均すると30分ぐらいの時間になります。
そして毎日作業ができるわけでもないので、非常にモチベーションを保ちづらいです。
とにかく少しでも開発に振れることが大事になっていきます。

スケジュールも立てていなかった。

=== タスク内容を把握できない
設計はざっくりしすぎてタスク内容を把握できずに、何をやればいいか分からない状態になっていました。
ざっくりとは〇〇APIはレスポンス△△を返すという粒度でタスクを振っていました。
僕の考えで基本設計レベルで落とし込むと作業になってしまい面白くなくなると考えていました。
しかし、実際は実装者に丸投げしてしまい、何をやればいいか分からない状態になっていました。
例えば、バリデーションは何が必要か？DBはどこから取得する必要があるのか？など考える必要があります。
実装する際にこういう事を考えるとの非常にストレスになりますし、時間も掛かってしまいます。
実装レベルでは手を動かすことだけに集中できる状態にする必要がありそうでした。

=== タスクが大きすぎる
1タスクが大きすぎるでissueがcloseできず、進捗を感じづらくなってしました。
自分が前に進んでいる感を感じることも大事ですが、周りに進んでいることを感じさせることも非常に大切です。
ただ、タスクが大きすぎたことで1〜2週間ずっとcloseできないこともありました。
進捗アウトプットできないので非常に気持ちが辛くなりました。実際にslackを振り返ると乞うことを投稿していました。

//image[sec1-ext5-1][ペルソナ][scale=1.0]

=== 作業の熱量が入るタイミングが異なる
それぞれ得意分野やスキルセットが異なっているため、タスクによって作業のスピードが異なっていきます。
例えば僕は環境構築周りに関しては知見がなく、何をやっていいか分からない状態でした。そのため、1からキャッチアップする必要があり、座愛のissueに関わるには時間が掛かります。それなら自分の得意分野をやっていったほうがコミットしている感を持てます。
そういう考えになっていくと環境構築はつとむさんに任せるという空気になり属人化していくようになりました。
これって当初のスキル向上できるのか？という疑問も感じていくようになっていきました。

=={sec1-ext6} モチベーションを上げるための工夫

モチベーションが下がっていくことは分かりました。個人開発していた僕ならここで流れに任せて終わっていたと思いました。
しかし、今回はチーム開発です。僕がやりたいと考え、声を掛け、始めました。簡単に投げ出すことはできません。
発起者としての責任感もはありました。
どうやればモチベーション上げながら、楽しみながら続けれるかを考えていきました。
アプローチを色々あると思います。例えば指揮を上げるために感情に訴えて引っ張ていくスタイルもあると思います。
しかし、今回はオンライン上でのやり取りと時間の制約もあるため感情での指揮は難しいと考えました。
（おそらく僕のスタイルは合わないです。。）

=== README駆動：見た目を豪華にして気分向上
まずは見た目から入ろうと考えました。やはりGitHubを使っているためTOPのREADMEであると考えました。
そのためREADMEは豪華にしていく作成です。図やコントリビュータを入れたりして、対外的にもアピールできるようにしました。
下記図は作成したREADMEです。ドキュメントも一箇所に集めること把握できるようにしていました。

//image[sec1-ext6-1][ペルソナ][scale=0.8]

//image[sec1-ext6-2][ペルソナ][scale=0.8]

//image[sec1-ext6-3][ペルソナ][scale=0.8]

実際に作成したのことで気分は高まりました。
こういうのはモチベーションは長続きするものではないですが、見た目から入ることは大事です。

=== GitHubのissue駆動：タスクは細かく、小さくする
毎日とはいわないですが、できる限り少しでも作業してもらうようにissueは細かく分割するようになりました。
これによりissueの作成は急激多くなりました。何かしら作業する場合はissueを作成してから作業するフローにもしました。
これをするようになり、一日で終わるようになっていきました。

=== GitHubのcontributions駆動：前に進んでいることを感じよう
エンジニアのモチベーションはGitHubに草を生やすこともあるだろうと思います。
できるだけコントリビュートを増やせるような状態にしました。
コントリビュートはissueやプルリクの作成で生やすことができます。
そのため、細かくissueとプルリクを出すように心がけていきました。
これをすることで僕は下記のような感じでコンスタントに作業することができるようになりました。
とにかく週間づくりができる工夫が大事であると感じました。

また、issueとプルリクは細かくなったことで確認する人も負担も減るようになっていきました。

=== アウトプット駆動：Twitterに発信していこう
アウトプットしていることもモチベーションになると考えました。
手軽なアウトプットはtwitterだと考えました。開発用のtwitterを取得していたので、そのアカウントで発信していこうと考えました。
ただ、手動での運用は負担も増えますし、続かなくなることは目に見えて分かりました。
そのため、下記のようなツールを作成しました

 * GitHubでプルリクをマージした際にツイートする
 * slackで特定のリアクションをつけたらツイートする

実際の画面は下記のような形です。

下記のような感想ももらいました。

 * ツイ廃なのですぐにマージされたことが分かるようになりました。
 * 継続的ツイートをすることで、自分含め他の人の活動がはっきり見える化するので、良い刺激にもなります。
 * githubなどを見ている開発者モードのときじゃなくても、Twitterで通知を見られる。それぞれ、開発に時間を使えるタイミングや量が違い、ほぼ完全にリモートで作業しているチームでのコミュニケーションロスによる摩擦を減らせる。

作成したツールについてQiitaに記載しているので詳細を知りたいかはご確認いただければです。

=={sec-ext7} チーム開発はたのしい
現在は公開はしていませんがプロトタイプで動く所まで完成しました。
ただUIがいまいちだったのでリニューアルする予定です。

=={sec-ext8} まとめ
最後にチーム開発をやってみて、個人開発の違いを挙げていきます。

//table[envvars][個人開発とチーム開発]{
名前	個人開発	チーム開発
-------------------------------------------------------------
モチベーション	あああ	あああ
スキル向上	あああ	あああ
開発スピード	あああ	あああ
開発フロー	あああ	あああ
//}

個人開発とチーム開発の考察

= 個人的なベスト・プラクティス

本章ではなおとが経験した中での個人プラクティスを示します。

=={sec-ext1} チーム開発の目的を決めよう
まずはチーム開発の目的を明確化しましょう。
特に下記２つのプロダクト思考、技術思考ははっきりさせたほうが後々のコミュニケーションロスト減らすことができます。

 * プロダクトをリリースして収益を目指していくのか
 * チーム開発のプロセスを得て技術の向上を目指す

例えば、プロダクト思考なら最初にアプリとしての設計が必要ですし、リリースを流行るために得意分野の技術を選択することになると思います。

=={sec-ext1} 作るものを決めよう
アイディアがあればいいですが、思いつかないこともあると思います。実査に僕もあまりアイディアが思いつくタイプではありません。
最初は既存システムを真似するような形でもいいと思います。

下記サイトは個人開発のサービスが集約されているため、他の人がどんなものを実際に作っているのが分かるため参考になります。
まずは同じようなものを作ってオリジナルティを出していく形でいいと思います。

 * 開発会議(https://devtalk.jp/)
 * 個人開発のフリマ(https://devmart.jp/)
 * litfire(https://litfire.jp/)

技術的なスキルを高めたい人が多く、作るものが決まらない場合モチベーションが落ちてしまうのでまずは真似から入って手を動かせるようにしていきましょう。

・エンタメ系
・課題解決

=={sec-ext1} ペルソナを作成しよう

ペルソナとは企業や商品の典型的なターゲットとなる顧客像のことです。
氏名や年齢、居住地、職業、年齢、価値観やライフスタイル、身体的特徴までのかなり細かい情報を盛り混んでいきます。

なぜこれが必要なんでしょうか？それはコミュニケーションのコストを下げるためです。
僕たちも最初はペルソナを作成しておらず、各々の感覚に任せていました。
しかし、実際に画面配置を考える際にイメージしている像がことなってしまい確認作業に時間が掛かっていました。

ペルソナを作成する際は具体的に決めていくことが大事です。
僕らは下記の項目を作成していきました。皆でワイワイ想像して作っていくの楽しいです。
そして、アイスブレイクになって一体感が生まれてきます。

 * 名前
 * 年齢
 * 職業
 * 大学
 * 使用言語
 * 家族構成
 * 性格
 * 職場環境
 * 生活環境

//image[persona][ペルソナ][scale=0.8]

実際にペルソナを作成したら、そのペルソナの人だったらどう使いたいで考えることで全員の認識を合わせることができます。
各個人の主観から、あの人ならという考えになっていきます。

=={sec-ext1} 使用したい技術を検討しよう
エンジニアなので技術は好きだと思います。個人開発の良い所は制約なしで自分の好きなものや、やってみたい技術を選択することができます。
これが仕事の場合、簡単に技術を決めることはできないと思います。納期や品質、チームメンバーのスキルなど複数のパラメータがある中で決める必要があるため自分が好きだからややってみたいだけでは決めることは難しいです。

使う技術に関しては特に技術の勉強をしたいと思っている人はモチベーションに左右されます。その為、ワクワクする技術を率直に決めていくのが良いと思います。

僕たちは最初に下記のような形で決めていきました。とにかくワクワクするかを話し合いましょう。

//image[design2][技術][scale=0.8]

 * フロントエンド
 ** 言語: TypeScript
 ** FW: Vue.js
 ** CSS FW: Element
 * バックエンド
 ** 言語: PHP、Python
 ** FW: Laravel
 * インフラ
 ** DB: MySQL
 ** サーバー: NGINX、Docker
 * 開発ツール
 ** コミュニケーションツール: Slack
 ** 仕様書: PlantUML

=={sec-ext1} 設計を考えよう
設計、設計書は作成しよう。たまにアジャイルだから設計書はいらない。モダンな開発はソースコードがすべて。ドキュメントは必要ないと聞いたことがあります。オンライン上の開発かつまとまった時間出ない場合は設計書は必要です。
チーム開発ではあなたの頭の中にだけ設計があったもだめです。如何に皆が同じ認識を持てるかが大事です。
ここではバックエンドの設計について考えていきます。

 * UIのイメージを作成
 * 必要なデータの洗い出しを使用
 * DB設計する
 * API仕様書を考える
 * 各APIの設計を考える

=={sec-ext1} タスクは細かくしてissueを作成しよう
設計ができた後はタスクを分割するだけです。この時のタスクはissueに作成していきましょう。
issueの粒度としては30分〜1時間で終わるぐらいに分割するのが良いと思います。ただ細かく分割すると1タスクの関連性が把握できなくなるかもしれません。例えば下記の3つのissueがある場合に1と3が関連しているかが把握しづらくなります。

 * 〇〇のValidationを作成
 * ☓☓のバリデーションを作成
 * ○○で使用する関数を作成する

こういう時は親issueを作成して、子のissueを作成すると分かりやすくなります。

 * 〇〇の実装
 ** 〇〇のValidationを作成
 ** ○○で使用する関数を作成する

=={sec-ext1} 議論はGitHubで行おう
作業する際に不明点や確認したい点が出てくると思います。こういう時はどうやって確認していますか？
近くにいれば口頭で聞く、いなければslackなどで確認することは多いのではないでしょうか？
手軽に確認できるのでいいのですが、デメリットもあります。
それは証跡が残っていかないことです。slackに残しておけば記録としてはのこりますが、会話が多いと流れてしまいますし、話題が途中に変わると振り返りづらくなってしまいます。

その為、GitHubのコメントで議論することでタスクに対しての話し合いや決定が振り返りやすくなります。
僕たちもissueに対しての課題はコメントを使い、簡単な確認はslackを使うようにしてGitHubを確認して内容を把握できるようにしました。
こうすることで新しく人が入った際もGitHubを見ればどんなやり取りをしているかが把握できるようになります。

=={sec-ext1} こまめにプルリクを出していこう
プルリクが大きいとレビュー作業に時間がかかります。まして、自分も初めての言語になれば読むのにも時間がかかります。
