= プライベートでチーム開発を振り返り
とりあえず文字を埋めている段階です。

=={sec-ext1} はじめに
本章ではなおとのどんな気持ちでチーム開発をやってみたいと思ったのか？
やってみての気持ちなど感情面をフォーカスした内容を書いています。
正直プライベートでのチーム開発は想像以上に難しかったです。漠然とチーム開発をやればスキルもモチベーションも上がるのだろうと感じていましたが、実際は工夫をしないとメンバの関係も気まずくなりますし、スキルの向上も難しいです。

この章を読んで頂いた皆さんにはプライベートのチーム開発の雰囲気が伝われば嬉しいです。

=={sec-ext1} プライベートでチーム開発をしたいと思ったきっかけ
皆さんはプライベートのチーム開発にどんなイメージを持っていますか？
僕は下記のイメージを持っていました。
 * わいわいできて楽しそう
 * レビューなどをしてスキルが上がりそう
 * 他の人がいることでモチベーションが続きそう

1人で開発をしているとモチベーションが落ちていつも中途半端になってしまいます。
Webアプリを考えるさいはフロントもバックもインフラも考えないといけない。1から勉強すると時間が掛かってします。
いつも中途半端になって終わってしまいます。そして個人なので途中で諦めても誰にも迷惑が掛からないので挫折は何度もしてました。

皆で開発することでモチベーションが保てるのではと思ったのがやってみたいきっかけです。
プライベートで開発に対して憧れやキラキラした感じを抱いていました。

=={sec-ext1} 人を集め、チーム開発を始める
やってみよう！！と思ってもすぐに始まるわけではありません。
まずは人を集めないといけないです。人を誘うのは難しいです。
断られたらどうしよう。しっかりした計画がひつようなのでは？自分と合わない人だったらどうしようと考えてしまうタイプです。

そこで最初はWeb勉強会のLTをした際に声を掛けました。なぜLTだったのかは、勉強会に参加する人なら勉強熱心であるという感じがしたからです。
その時に手を上げてくれたのがTokiさんです。

次に使用したのがTwitterです。Twitterで知り合い、技術的なツイートやQiitaの投稿も多かったつとむさんに声を掛けました。

そして実際に対面で集まり何を作るか、どんな技術を使うかを話あって進めていきました。
この時はまずは目的を決める必要があると考えました。

 * リリースを目標とするのか？
 * スキル向上を目標とするのか？

リリースを目標とするならば技術は自分達が知っているものを選択するのが良いですし、スキルを向上ならば挑戦したい技術を選ぶことになっていきます。
僕たちはチーム開発を体験してスキル向上を目指すことを選択しました。
面白いことにSIerやWeb系、ベンチャー等経験分野が違います。皆が経験してきたことが外でも上手くいくかを通用するかが分かれば面白いよねと話していました。

作るものに関しては僕が途中まで実装していたものをWeb化しようという流れになりました。そして技術もやってみたいものを選択しました。

=={sec-ext1} モチベーションを維持することは難しい

決めるものは決めた！！これであとは開発するだけだ！！と思っていました。。

しかしそんな簡単に開発できるものではありません。
モチベーションを維持が難しい。個人開発では諦めても自分一人だけですむが、チーム開発は他の人にも影響する。
気まずい感じになってしまう

=== 金銭的なインセンティブがない
金銭的なインセンティブは強いモチベーションになりました。
このプロダクトがうまくいけばお金が得ることがでる！！これは強い動機づけになります。
しかし今回はお金に関しては何も発生しません。
そんな中で続けていくためには、お金 < スキル でなければなりません。

=== 時間的な制約がある
僕たち全員、仕事をするのでプライベートの時間は平日と休日になります。
そして他のプロジェクトや勉強もしなければならず、チーム開発に避ける時間は非常にすくないです。
僕は平日は最大2時間、平均だと30分、土日でも4時間ぐらいです。
こういった時間は制限されているので、長期的な期間の開発となりモチベーションも徐々に下がっていきます。

=== コミュニケーションが非同期
基本的にはやりとりはslackを使っています。
しかし時間的な制約がるので返信がいつ返ってくるのかがわかりません。

=== タスクを把握できない
誰がどのタスクをやりたいのか？やっているのか把握できませんでした。
モチベーションの観点では自発的にタスクを拾ってもらいたいですが、タスクの洗い出しもできておらず難しかったです。

=== タスクが大きすぎる
最初はTOP画面の実装など機能単位でタスクを分割していました。機能単位なので作業タスクは非常に大きく、期間も1〜2週間掛かってしまいました。
進捗をアウトプットできないことは非常に気持が辛くなっていきました。

=== 担当領域によって熱量が入るタイミングが異なる

=== タスクによってボトルネックが発生する

=={sec-ext1} モチベーションを上げるための工夫

「ゴールに向かって進んでいること」、「アウトプット」することを心がけた

=== README駆動：見た目を豪華にして気分向上
=== GitHubのissue駆動：タスクは細かく、小さくする
=== GitHubのcontributions駆動：前に進んでいることを感じよう
=== アウトプット駆動：Twitterに発信していこう

=={sec-ext1} チーム開発はたのしい

=={sec-ext1} まとめ

= 個人的なベスト・プラクティス

本章ではなおとが経験した中での個人プラクティスを示します。

=={sec-ext1} チーム開発の目的を決めよう
まずはチーム開発の目的を明確化しましょう。
特に下記２つのプロダクト思考、技術思考ははっきりさせたほうが後々のコミュニケーションロスト減らすことができます。

 * プロダクトをリリースして収益を目指していくのか
 * チーム開発のプロセスを得て技術の向上を目指す

例えば、プロダクト思考なら最初にアプリとしての設計が必要ですし、リリースを流行るために得意分野の技術を選択することになると思います。

=={sec-ext1} 作るものを決めよう
アイディアがあればいいですが、思いつかないこともあると思います。実査に僕もあまりアイディアが思いつくタイプではありません。
最初は既存システムを真似するような形でもいいと思います。

下記サイトは個人開発のサービスが集約されているため、他の人がどんなものを実際に作っているのが分かるため参考になります。
まずは同じようなものを作ってオリジナルティを出していく形でいいと思います。

 * 開発会議(https://devtalk.jp/)
 * 個人開発のフリマ(https://devmart.jp/)
 * litfire(https://litfire.jp/)

技術的なスキルを高めたい人が多く、作るものが決まらない場合モチベーションが落ちてしまうのでまずは真似から入って手を動かせるようにしていきましょう。

=={sec-ext1} ペルソナを作成しよう

ペルソナとは企業や商品の典型的なターゲットとなる顧客像のことです。
氏名や年齢、居住地、職業、年齢、価値観やライフスタイル、身体的特徴までのかなり細かい情報を盛り混んでいきます。

なぜこれが必要なんでしょうか？それはコミュニケーションのコストを下げるためです。
僕たちも最初はペルソナを作成しておらず、各々の感覚に任せていました。
しかし、実際に画面配置を考える際にイメージしている像がことなってしまい確認作業に時間が掛かっていました。

ペルソナを作成する際は具体的に決めていくことが大事です。
僕らは下記の項目を作成していきました。皆でワイワイ想像して作っていくの楽しいです。
そして、アイスブレイクになって一体感が生まれてきます。

 * 名前
 * 年齢
 * 職業
 * 大学
 * 使用言語
 * 家族構成
 * 性格
 * 職場環境
 * 生活環境

//image[persona][ペルソナ][scale=0.8]

実際にペルソナを作成したら、そのペルソナの人だったらどう使いたいで考えることで全員の認識を合わせることができます。
各個人の主観から、あの人ならという考えになっていきます。

=={sec-ext1} 使用したい技術を検討しよう
エンジニアなので技術は好きだと思います。個人開発の良い所は制約なしで自分の好きなものや、やってみたい技術を選択することができます。
これが仕事の場合、簡単に技術を決めることはできないと思います。納期や品質、チームメンバーのスキルなど複数のパラメータがある中で決める必要があるため自分が好きだからややってみたいだけでは決めることは難しいです。

使う技術に関しては特に技術の勉強をしたいと思っている人はモチベーションに左右されます。その為、ワクワクする技術を率直に決めていくのが良いと思います。

僕たちは最初に下記のような形で決めていきました。とにかくワクワクするかを話し合いましょう。

//image[design2][技術][scale=0.8]

 * フロントエンド
 ** 言語: TypeScript
 ** FW: Vue.js
 ** CSS FW: Element
 * バックエンド
 ** 言語: PHP、Python
 ** FW: Laravel
 * インフラ
 ** DB: MySQL
 ** サーバー: NGINX、Docker
 * 開発ツール
 ** コミュニケーションツール: Slack
 ** 仕様書: PlantUML

=={sec-ext1} 設計を考えよう
設計、設計書は作成しよう。たまにアジャイルだから設計書はいらない。モダンな開発はソースコードがすべて。ドキュメントは必要ないと聞いたことがあります。オンライン上の開発かつまとまった時間出ない場合は設計書は必要です。
チーム開発ではあなたの頭の中にだけ設計があったもだめです。如何に皆が同じ認識を持てるかが大事です。
ここではバックエンドの設計について考えていきます。

 * UIのイメージを作成
 * 必要なデータの洗い出しを使用
 * DB設計する
 * API仕様書を考える
 * 各APIの設計を考える

=={sec-ext1} タスクは細かくしてissueを作成しよう
設計ができた後はタスクを分割するだけです。この時のタスクはissueに作成していきましょう。
issueの粒度としては30分〜1時間で終わるぐらいに分割するのが良いと思います。ただ細かく分割すると1タスクの関連性が把握できなくなるかもしれません。例えば下記の3つのissueがある場合に1と3が関連しているかが把握しづらくなります。

 * 〇〇のValidationを作成
 * ☓☓のバリデーションを作成
 * ○○で使用する関数を作成する

こういう時は親issueを作成して、子のissueを作成すると分かりやすくなります。

 * 〇〇の実装
 ** 〇〇のValidationを作成
 ** ○○で使用する関数を作成する

=={sec-ext1} 議論はGitHubで行おう
作業する際に不明点や確認したい点が出てくると思います。

=={sec-ext1} こまめにプルリクを出していこう
