= プライベートでのチーム開発は想像以上に難しかった

//flushright{
なおと（@naoto_7713）
//}

=={sec1-ext1} はじめに
皆さんはプライベートでチーム開発をしたことはありますか。

 * したことがある人は個人開発との違いはどう感じましたか
 * したことがない人はチーム開発をしてみたいと思いますか

僕はプライベートでチーム開発することに憧れを持っていました。
 
 * チーム開発ならば、モチベーションを保てるのではないだろうか
 * チーム開発ならば、スキルアップできるのではないだろうか
 * チーム開発ならば、楽しく開発ができるのではないだろうか

それならば、プライベートでチーム開発をやってみようと思い2019年2月から始めました。
人もいない、チーム作りも分からない。0からのスタートです。
正直、何から始めたら良いか分かりませんでした。
ただ、仕事でもチーム開発をしているので、同じ要領で進めていけば上手くいくのではと考えていました。

しかし、実際に始めると課題が沢山でてきました。
 
 * 決めなければいけないことが分からない
 * まとまった時間が取れず中々進まない
 * 設計書って作ったほうが良いのか
 * 皆のモチベーションが下がってしまう

「チーム開発 進め方」と調べても0からの進め方については情報が少なく、トライ & エラーで進めていきました。
上手くいった仕組み、いまいちだった仕組みは沢山あります。
そこで本章では、僕(なおと)がどんな考えでチーム開発を進めたのかを振り返っていきます。
プライベートで0からチーム開発するのは大変でしたが、それ以上に学びが多く有意義な時間でした。
そういった雰囲気がお伝えできれば幸いです。

===== 本章で伝えたいこと

 * なぜ始めようと思ったのか
 * どうやってチーム開発を進めていったのか
 * チーム開発のどこが難しかったのか
 * チーム開発だからといってモチベーションを保てるわけでない
 * モチベーションを上げていくための工夫
 * プライベートでチーム開発をする楽しさ
 * 個人開発とチーム開発の違い

===== 本章では触れない内容

 * チーム開発の進め方(2章)
 * プロジェクト管理(3章)
 * 環境構築(4章)
 * 使用したツールの紹介(5章)

=={sec1-ext2} チーム開発をやりたい！！と思ったきっかけ
プライベートでチーム開発をやってみたいと思った理由はいくつかあります。

==== 楽しそう
個人開発は自分のペースで進めることができますが、孤独を感じることがあります。
仕事でチーム開発をすることあっても、納期の心配や人間関係の煩わしさ、作業のマンネリ化などで楽しさを忘れてしまうことがあります。
上記のようなストレスが少なく、かつ信頼できるメンバーと一緒に開発できれば楽しいだろうなと考えていました。

==== スキルアップできそう
皆さんは自分で考えた設計や実装が本当に良いものなのかと考えたことはありませんか。
僕は、自分のコードはアンチパターンになっているのではないか、もっと良い書き方があるのではないかと考えてしまうタイプです。
こういった時にレビューしてくれる人がいれば、もっとスキルアップできるのではないかと考えていました。

==== チームを0から作ることを体験してみたい
仕事でもチーム開発をしていますが、自分で0からチームを作成した経験がありません。
僕は常駐して仕事するため、チームが既にできあがっている状態で参加することが多いです。
そして、フリーランスであることからチームリーダを経験する機会もほぼありません。
そういったこともあり、人も仕組みも全く存在しない状態から自分でチームを作ってみたいという思いがありました。

==== 自分のスキルや経験が通用するかを確認したい
フリーランスになってから、特定の会社や現場でしか通用しないスキル・経験はリスクと強く考えるようになりました。
しかし、今の自分のスキル・経験が他の現場でも通用するのかを確認する術はなかなかありません。
そのため、確認できる場所が欲しいと感じていました。

==== 高いモチベーションを保てそう
恥ずかしながら僕はモチベーションが保てず、途中で諦めてしまった個人開発がいくつもあります。
例えばWebアプリを作成すると一言で言っても、やることは沢山あります。

 * アプリ内容の設計
 * 画面設計、DB設計
 * フロントエンド実装
 * バックエンド実装
 * インフラ周りの構築

最初はモチベーションが高くても、時間とともに下がっていきます。
モチベーションが高いうちに、形あるものを作りたいですが、初めての技術はキャッチアップにも時間が掛かります。
キャッチアップに時間が掛かると、プロダクトの進捗がでません。
そしてモチベーションが下がり、さらにキャッチアップに時間が掛かってしまうという負のサイクルに陥っていました。
良くも悪くも、個人開発では途中で諦めても他の人に迷惑が掛かりません。
そこに甘えて、プロジェクトを投げ出してしまいました。
個人開発では最後までやり切ることができなかったので、チーム開発で他の人も巻き込み、良い意味で諦めづらい空気を作りたいと考えていました。

=={sec1-ext3} どうやって人を集めよう
「チーム開発をやってみよう！！」と考えても、実際にはすぐに始めることは難しいです。
当たり前ですが2人以上でなければチームにはなりません。
人を集める必要がありましたが、ここが最初の難関でした。
そもそも僕は内向的なので簡単に声を掛けるなんて緊張してできませんでした。
「断られたらどうしよう。何も決まっていないのに誘ったら迷惑になるのでは。」と考えてしまい行動に移せませんでした。

しかし、行動しなければ何も始まらないのも事実です。
漫然とした不安を消すために、具体的なアプローチ方法と、そのメリット、デメリットを考えることにしました。

==== 身近な人に声を掛ける
自分の知り合いに声を掛けるので安心感はあります。
しかし、知り合いだからこそ断られたらショックを受けやすいです。
上手く開発が進まずに中途半端なってしまった場合、今後の付き合いも気まずくなる可能性があると考えました。

==== Twitterで呼びかけ
Twitterで「プライベートでチーム開発をやってみたい人募集します！！」とツイートする方法です。
これは1番気軽に声を掛けられそうですが、自分と全く関わりのない人から返信がくる可能性もあります。
その人の性格や考え方が分からないので、見ず知らずの人といきなり始めるのは不安があります。

==== 勉強会で声を掛ける
僕は月に1〜2回の頻度で勉強会に参加していたので、そこで声を掛ける方法もありました。
勉強会に参加している人はスキルアップに対して意識も高いので、一緒に開発することでモチベーションも上がりそうです。
しかし、初対面でいきなり「チーム開発しませんか？」と声を掛けると怪しい人だと思われるので、コミュニケーション力が求められます。
@<br>{}

いくつかアプローチ方法を考えた結果、最初は勉強会のLTで募集することにしました。
LTの最後に「プライベートで一緒に開発をやりたい人いませんか？」と呼びかけました。
勉強会参加者というフィルターを掛け、さらに僕のLTに興味を持った人にアプローチを掛けることで、スキルアップに対して意欲が高く、自分と考えが似ている人を効率的に集められるのではないかと考えました。

その結果、Tokiさんが声を掛けてくれました。
今まで直接話したことはありませんでしたが、「楽しそうだからやってみたい！チャンスだと思った」と言ってくれたのを覚えています。(嬉しかったです。ありがとう、Tokiさん！！)
1人から2人になると気持ちも前向きになっていきます。
その勢いのままTwitterで知り合ったつとむさんにも声を掛けました。
つとむさんはGitHubやQiitaに積極的にアウトプットをしていて、一緒に開発をすることができたら楽しいだろうと思っていました。
結果的につとむさんにも参加してもらいました。(僕の考えは間違っていなかったです。ありがとう、つとむさん！！)
@<br>{}
@<br>{}
@<br>{}
@<br>{}
この経験から次のことに気づきました。

 * チャンスを掴むためには、飛び込む勇気が必要
 * メンバーを選ぶ際、具体的なアウトプット(GitHubやQiita)があることで、相手が興味のある分野や技術力が分かるので声が掛けやすくなる。

そして3人でのチーム開発の一歩を踏み出していきました。

=={sec1-ext4} モチベーションが高いうちに、早めに進めよう
何事もモチベーションとスピードが大事なので、すぐに対面で話し合い進め方を決めていくことにしました。

==== 目的を決める
皆に「一緒にチーム開発しましょう！！」と声を掛けた時、何のためにチーム開発をするのか、何を目指すのかを伝えていませんでした。
僕とTokiさんとつとむさんで期待していることはバラバラな状態です。
プライベードの時間を費やすからには、皆が成長できる環境を作りたいと考えていました。
そのためには、皆がチーム開発に対して何を期待しているかを共有しました。

話し合いでは次のことが挙がってきました。

 * 仕事ではチーム開発ができていないから経験したい
 * モダンな技術をつかってみたい
 * 転職活動などでアピールできる成果物がほしい
 * ０から開発してリリースしたい
 * 会社での経験が外でも通用するかを試してみたい
 * プロダクトを成功させて利益を得たい

複数の目的が混在すると軸がブレる可能性もあったので、できる限りシンプルな目的にしました。
結果、僕たちは「@<b>{チーム開発を通して、スキルアップを目指す}」を目的にしました。

==== 作るものを決める
もともと僕は、今まで個人的に作成していたWordCloud@<fn>{word_cloud}をWebアプリ化したいという構想がありました。
チームの考えとして、プロダクトを作るモチベーションより、スキル向上に重きを置いていたので異論もなく決まりました。
//footnote[word_cloud][文章中で出現頻度が高い単語を複数選び出し、その頻度に応じた大きさで図示する手法。 ウェブページやブログなどに頻出する単語を自動的に並べることなどを指す。 文字の大きさだけでなく、色、字体、向きに変化をつけることで、文章の内容をひと目で印象づけることができる。]

僕たちが開発中のアプリの説明を少しだけすると、勉強会のツイートを集計・分析して、可視化することで勉強会の雰囲気や特徴を掴めるようにするものです。
勉強会の特徴を把握することで、初めて参加する時の不安などを減らし、勉強会への参加ハードルを下げることを目的としています。現状だとプロトタイプまでは作成できた状態ですが、UIは一新して作り直そうと考えています。

==== 設計を決める
最初に決めたことはUI部分です。画面から考えていくのが１番イメージしやすいと思ったからです。
しかし、デザインスキルが低い僕はUI設計に苦戦しました。また、アプリの機能イメージも皆に伝えきれませんでした。
そのため、画面のワイヤーフレームとDBの設計は僕が作成していきました。

しかし機能一覧も考えずに付け焼き刃で作成してしまっているので、設計にも時間が掛かりました。
作業分担もできていなかったので、自分がボトルネックなっていることは感じていました。
このままでは全員のモチベーションが下がってしまうので、設計はほどほどにして実装と一緒に仕様・設計を皆に考えてもらう方針に変更しました。

=={sec1-ext5} モチベーションを維持することは難しい
コードを書いて手を動かせばモチベーションも上がるはずだと最初は甘く考えていました。
初めは勢いよく進んでいきましたが、2週間も経つと、自分含め皆のモチベーションも下がってきているのを感じました。
個人開発ならば、僕はここで諦めていたでしょう。

しかし、今回はチーム開発です。
発起者として責任もあるため、僕が簡単に投げだしてしまうわけにはいきません。
チームのモチベーションが下がってしまう要因を考える必要がありました。

==== 時間的な制約がある
メンバー全員が日中に仕事をしているため、チーム開発の作業を行えるのは仕事が終わった後の平日夜か、土日しかありません。
僕の生活リズムだと平日は最大1時間、土日だと4時間を割り当てることができます。
しかし、自分が興味のある分野や仕事で必要な技術の勉強をする時間も考慮に入れるともっと少なくなります。
また、毎日確実に時間が取れるわけではありません。
そうして後回しにしているうちに、チーム開発に触れる時間はどんどん減っていきます。
当然、進捗も悪くなるのでモチベーションが下がってしまいます。

==== タスクを明確にしなかったため、何をして良いか分からない
いざ、作業を始めるぞと思っても、タスクを曖昧にしか決めていなかったため、思うように作業が進みませんでした。
実際に作成していたissueが次の画像となります。

//image[sec1-ext5-2][作成したissue][scale=0.9]

これを見てすぐに実装を進められるでしょうか。「自由にいい感じにしてください」という依頼では曖昧すぎて、具体的な作業内容が分かりません。まず何をしたら良いのか
という所から考えなければならないので、すぐに作業に取り掛かることができません。
特に平日は業務の疲労もあるため、上手く頭が働かず余計に時間が掛かってしまいます。
僕は作業の段取りを最初にしっかり組まずに作業を始めてしまったため、作業毎に何をすれば良いのか都度考えるという非効率な進め方になってしまいました。
当然この方法では進捗も悪くなるので、やる気も低下していました。
その結果、作業が苦痛になり、何もしないことが多くなりました。

短い時間で作業を進めていくためにはできるだけ考える作業(設計)と手を動かす作業(実装)を分ける必要があると感じました。

==== スケジュールを立てていなかった
以下のことが理由でスケジュールを立てることができませんでした。

 * 決まった時間を確保できないので工数を立てづらい
 * タスクの内容が把握できないので見積もりを立てられない
 * スケジュールがあるとプレッシャーになるのではないのか

期限があると少なからずプレッシャーを感じます。そういった中だと楽しく進めることができなくなるのではと考えてしまい、しっかりとスケジュールを立てることができませんでした。しかし、期限がないことで気も緩んでしまいます。
例えば、設計作業を2週間で終わらせるとしましょう。期限までに作業を完了させるためには1週間でここまで完了していないといけない、3日目の進捗でこのタスクを終わらせなければならないというように、逆算して計画を立てて作業を着実に進めていく必要があるため、責任をもって作業に取り組むことができます。
しかし、具体的な期限がない場合、どうしても自分に甘くなってしまい、作業を後回しにしがちになってしまいます。また、目標なき作業は意義が見出しづらくなってしまうため、モチベーションも下がってしまいます。

==== 中間目標を立てなかった
１つのタスクに対して作業量が多すぎると完了するまでに時間が掛かり、達成感を感じづらくなってしまいます。
タスクを明確に決めていなかったので、実装途中に機能をどんどん追加して収拾がつかなくなってしまい、進捗をアウトプットできなくなってしまいました。
進捗をアウトプットできないので前に進んでいる感が生まれず、モチベーションが低下してしまいました。

大きな目標だけを立てて全力疾走するのではなく、中間目標を立てて段階的に目標をクリアしていくことで高いモチベーションを保ちやすいと気づき、途中からはタスクの進め方を変えています。

==== 属人化してしまう
メンバー全員、得意分野やスキルセットが異なるため、タスクによって作業スピードが違います。
例えば僕は環境構築周りに関しては知見がないので、キャッチアップから始める必要があります。
反対につとむさんは環境構築周りの作業が得意なので、タスクをすぐに完了させることができます。
チーム開発だと自分の作業がクリティカルパスとなり、全体の作業が止まってしまうことがあるため、作業の分担を決める際に得意な人にやってもらうという空気が生まれてきます。僕たちは得意分野で作業分担を決めてしまい、進みが早いと周りのメンバーがキャッチアップしづらい状況になってしまい、属人化のような形になりました。

僕らはスキル向上を目的にしていたはずなのに、いつしか自分のできることしかやらなくなってしまいました。

=={sec1-ext6} モチベーションを上げるための工夫
モチベーションが下がってしまう要因は分かってきました。
 
 * 時間的な制約があり、チーム開発に触れる時間が短い
 * タスクを明確にしなかったため、スムーズに作業に取りかかれなかった
 * 期限が決まっていないので、自分に甘くなる
 * 中間目標がなく、達成感を感じづらい
 * 作業の属人化が起こり、スキルの幅が広がらない

これらのことを踏まえて、モチベーションを上げ、楽しく進める方法を考える必要がありました。

メンバーの士気を高めるアプローチは色々ありますが、今回は仕組みづくりでモチベーションを上げていくアプローチを目指すことにしました。
人に依存しない仕組みは、他のチームでも利用できる可能性が高まります。

==== README駆動：見た目を豪華にして気分向上
まずは見た目から入ろうと考えました。
GitHubを使ったチーム開発といえば、やはり最初はREADMEになると思います。
このREADMEを豪華にして、テンションを上げていく作戦です。
アイコンや理念、構成図、アウトプット記事などのアピールできるものを集約して載せるようにしました。
アウトプットを一箇所に集めることで成果が目に見えて分かるようになり、達成感を感じることができます。そして、もっとREADMEを豪華にしたいという欲求を掻き立てる作戦です。

//image[sec1-ext6-1][README1][scale=0.9]

//image[sec1-ext6-2][README2][scale=0.9]

//image[sec1-ext6-3][README3][scale=0.9]

==== タスクは細かくする
チーム開発を続けていくコツは、少ない時間でも良いので毎日触れて作業をすることだと考えています。
少ない時間で作業するにはタスクは細かく、明確にする必要があります。

そのため、issueは細かい単位で分けることにしました。30分で完了できる作業を１つのissueにするよう心がけていました。
実際にタスクを細分化することによって、限られた時間の中で効率的に作業を進めることができ、達成感を得られやすくなりました。

==== 作業を可視化する
僕の場合はGitHubに草を生やすことでモチベーションが上がります。
僕たちも作業をした際に、contributionを増やせるような工夫をしました。
contributionはissueやプルリクの作成で生やすことができます。
そのため、細かくissueを作成して、細かい単位でプルリクを出すフローにしていきました。

次は僕のGitHub contributionsです。草が生えている箇所がチーム開発の作業をしている箇所です。平日もコンスタントに作業できています。

//image[sec1-ext6-4][GitHub contributions][scale=0.8]

==== Twitterで進捗を発信する
自分がやったことはどんどん発信していこうと考えました。
手軽なアウトプットはTwitterです。開発用のアカウントは取得していたので、そこで発信することにしました。
ただ、手動での運用は負担が大きいです。続かないことは目に見えているので
次のようなツールを作成しました。

 * GitHubでプルリクをマージした際にツイートする
 * slackで特定のリアクションをつけたらツイートする

//image[sec1-ext6-5][マージした際のツイート][scale=0.8]
//image[sec1-ext6-6][slackでリアクションした際のツイート][scale=0.8]

実際に運用した際にメンバーからもらった感想が以下です。

 * 「ツイ廃なのですぐにマージされたことが分かるようになりました」
 * 「継続的ツイートをすることで、自分含め他の人の活動がはっきり見える化するので、良い刺激にもなります」
 * 「GitHubなどを見ている開発者モードのときじゃなくても、Twitterで通知を見られる。それぞれ、開発に時間を使えるタイミングや量が違い、ほぼ完全にリモートで作業しているチームでのコミュニケーションロスによる摩擦を減らせる」

作成したツールについてはQiitaに以下の記事を投稿しておりますので、興味がある方は確認してみてください。

 * GitHubのWebhookでプルリクエストをマージした際にツイートできるようしてみた
 ** https://qiita.com/turmericN/items/f6267a75be45c51eaed7
 * Slackでリアクションをした際にツイートできるようにしてみた
 ** https://qiita.com/turmericN/items/23c86d70aae3dd8bfc77

=={sec-ext7} プライベートのチーム開発は楽しい
開発スピートはゆっくりではありましたが、2019年2月から始めたチーム開発を半年続けられました。さらに皆で同人誌を執筆することもできました。

自分のプライベートな時間を費やすので楽しくなければ続けられません。
楽しかったからこそ続けることができました。

==== 皆で決めていく流れが楽しい
個人開発では自分一人で考え、決定していきます。
しかし、チーム開発では皆で決めていくことになります。
それぞれの意見を出し合いディスカッションして、ベストやベターを探していく流れは一人では味わうことができない楽しさがありました。

==== 仕組みを０から構築できて楽しい
今回は人も仕組みも0からのスタートでした。
そのような中でGitHubの運用フローやタスクの洗い出しなどの仕組みを試行錯誤しながら作っていきました。
0から徐々に1になり、2になり、10になりどんどん良くなっていく過程を経験できました。

==== 自分の知らない技術を知ることが楽しい
１人で開発している時は、もっと良い書き方があるのではと悩むことがありますが、他メンバーにレビューしてもらうことで考えの幅が広がりました。
また、自分の知らない分野だとこの技術でそもそも何ができるのかということすら分かりませんが、その分野に明るいメンバーがいることでアドバイスをもらえます。
今回、bashによる環境の自動作成やDockerによる管理などの環境構築周りをつとむさんに作成してもらいました。この辺りの内容を僕はまったく理解できていませんでしたが、実践ベースで勉強することができてスキルアップできました。

==== 課題を見つけ解決する過程が楽しい
どんな作業でも進めていくうちに課題が出てきます。
例えば今回だと環境構築をもっと楽にしたい、タスクをもっと見える化したい、気軽にアウトプットできるようにしたい、などの課題を見つけました。
出てきた課題を皆で一つひとつ解決して、良い方向に進めていくことでチームの良さを感じることが出来ました。

=={sec-ext8} 個人開発とチーム開発の違い
最後にチーム開発をやってみて、僕が感じた個人開発との違いを挙げていきます。

==== モチベーション
個人開発もチーム開発もモチベーションについてはあまり大差はありませんでした。
最初はモチベーションが高く、時間が経つにつれて下がってきます。

しかし、チーム開発は途中で投げ出すと他のメンバーに迷惑を掛けてしまうので、責任をもって取り組むことができました。

ただ、他のメンバーが進めている中で自分だけ作業できない状態が続くと、申し訳なさからストレスを感じる可能性もあります。

==== 開発の自由度
自分１人で決定できる個人開発のほうが開発の自由度は高いです。
チーム開発だと自分がやりたい開発と他の人がやりたい開発が一致しないこともあります。チームで進めていくため、話し合いで決めていく流れになりますが、100%納得いく形になるとは限りません。

==== 開発のスピード
開発のスピードはケースバイケースですが、個人開発のほうが早くなると感じています。
他メンバーとの話し合いがなく、タスクの分割を考える必要がないためです。

一方で、チーム開発だと運用ルールや設計の割り振りを考える必要があります。また、他の人の作業完了待ちでボトルネックが発生する可能性があるので開発スピードが下がります。
しかし、開発スピードは下がるもののメンバー同士のレビューを挟むことで品質は向上する場合があります。

チーム開発は走り出しに時間は掛かりますが、メンバー同士のシナジーを生む可能性が高いです。

==== スキル向上
チーム開発のほうがスキル向上が早いと感じています。
他のメンバーのコードを読むことができ、そして自分のコードをレビューしてもらうことで、今まで自分で気づけなかったコーディングの悪い癖や問題に気づけたり、自分では思いつかなかった良いアイディアを学ぶことができます。
また、コードレビューの過程が入ることで、読みやすいコードを書くことを心掛けるようになります。
１人で実装するときより簡潔さや分かりやすさを意識してコードを書くようになるため、技術の向上を期待できるかも知れません。

しかし、チーム開発だとタスクの割り振りを工夫しなければ属人化やコードレビューの形骸化は起きやすくなってしまいます。

==== 意思決定
個人開発では自分一人で全てを決めるので意思決定について特に意識することはありません。

しかし、チーム開発では皆の意見をまとめて決定する必要があります。
意見をまとめて決定することは責任も伴いますが、そこは勇気を持って決めていきましょう。１番良くないのは何も決まらず進まないことです。

=={sec-ext9} さいごに
プライベートでのチーム開発は想像以上に難しかったです。
Tokiさん、つとむさんのような優秀なエンジニアが集まっても、チームで足並みを揃えて進めていくとなると中々上手くはいきません。
チーム開発は単に人が集まっただけでは機能しません。
人、仕組み、ルールなどを決めていく必要があります。それをトライ & エラーで進めていき、チームとしてまとめていくのがプライベート開発の醍醐味だと感じています。

今回、僕の気持ちや考えをお伝えしました。
皆さんは「自分ならもっと上手くできる」、「私ならこんな工夫する」など様々な考えがあると思います。
是非、想像だけでは終わらせずに、実際にプライベートでのチーム開発に挑戦してみてください。

新しい発見や学びを得ることができるはずです。

//image[myuhu4][][scale=0.6]