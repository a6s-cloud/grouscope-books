= プライベートでのチーム開発は想像以上に難しかった

//flushright{
なおと（@naoto_7713）
//}

=={sec1-ext1} はじめに
皆さんはプライベートでチーム開発をやったことはありますか。

 * やったことがある人は個人開発との違いはどう感じましたか？
 * やったことがない人はチーム開発をやってみたいと思いますか？

僕はプライベートでチーム開発することに対して憧れを持っていました。チーム開発ならばモチベーションも保てて、スキルアップも早くなるのではと考えていました。そして2019年2月からプライベートでチーム開発を始めることにしました。

0からチーム開発を始めるにあたって、正直何をすればいいのか分かりませんでした。ただ、仕事でもチーム開発をしているため、同じ要領で進めていけば上手くいくだろうとぼんやりと考えていました。

しかし、実際に始めると次のような課題が沢山でてきました。
 
 * 最初に決めておくべきことが分からない
 * まとまった時間が取れず中々進まない
 * 設計書って作ったほうがいいの？
 * 皆のモチベーションが下がっている！？

Googleで「チーム開発 進め方」と調べても０から体系的に始めていく方法はありませんでした。そのような中で、手探りで始めていったチーム開発ですが、上手くいったこと、上手くいかなかったこと沢山あります。

そこで本章では僕の感情面にフォーカスして実際にプライベートでチーム開発やってみてどうだったかについて振り返っていきます。

僕が経験したチーム開発の雰囲気が伝われば嬉しいです。

===== 本章で伝えること

 * なぜ始めようと思ったのか
 * チーム開発はどこが難しかったのか
 * どうやってチーム開発を進めていったのか
 * チーム開発だからといってモチベーションは保てるわけでない
 * モチベーションを上げていくための工夫
 * プライベートでチーム開発をする楽しさ
 * 個人開発とチーム開発の違い

===== 本章で伝えないこと

 * 体系化したチーム開発の進め方(2章、3章)
 * 使用したツールの紹介(4章)
 * 環境構築(5章)

=={sec1-ext2} チーム開発をやりたい！！と思ったきっかけ

==== 楽しそう
個人で勉強や開発をしていると孤独を感じます。
１人のほうが気楽に自分のペースで進めることができるので、僕は好きです。
しかし、皆でワイワイ話し合って1つの目標に向かって行く過程は個人開発では体験できない楽しさがあるのではと感じてました。

==== スキル向上できそう
1人で勉強してもスキルアップはしますが、自分が考えた設計や実装が本当に正しいのだろうか？もっと良い書き方があるのではないかと思うことが多々ありました。
こういう時にレビューしてくれる人がいれば、もっとスキルアップするのではないかと考えてました。

==== チームを0から作ることを体験してみた
仕事でもチームで開発を進めていますが、いわゆる0ベースで進めたことはありません。
基本的にはチームが既にできあがっている状態で参加することが多かったです。また、会社によっては仕組み体系化されていることもありまっさらの状態で始めた経験がありませんでした。

その為、人も仕組みも全くない存在しない状態からチーム開発を始める経験をしてみたかったです。
僕は個人事業主で常駐してエンジニアをしているので、特定の現場ではなく幅広い場所で役に立つスキル・キャリアを得たいと考えています。
そういった中で僕が今まで経験したことが外でも通用するのか、現場内でしが使えないものなのかを確認もしたかったです。

==== モチベーションが続きそう
僕の中ではモチベーションが1番大きな動機でした。
今までWebアプリをリリースなどはしていませんが、個人で勉強や開発をしていました。
何かしらのアプリを作成したいと考え際は、下記のことを進めないといけないです。

 * アプリ内容の設計
 * 画面設計、DB設計
 * フロント実装
 * バックエンド実装
 * インフラ周りの構築

自分に知見がある所は作業イメージを具体化できますが、知見がない所だとイメージを持つことができないです。
最初は熱が高くても、時間とともに熱は下がっていきモチベーションが下がってしまいます。
そのため、できるだけ早く形にする必要がありますが、初めての内容はキャッチアップに時間が掛かります。
キャッチアップに時間が掛かり、プロダクトの進捗がでない。そしてモチベーションが下がるのサイクルに陥ってました。
良くも悪くも、個人開発の良い所(?)は途中で投げ出しても誰にも迷惑が掛からないことです。
そして僕のGitHubには作りかけの中途半端な状態のアプリが沢山存在しています。

こういった事が個人開発では起きていたので、チーム開発なら得手不得手を相互に補完でき、他の人も巻き込んでいるので諦めづらくなるのではと考えました。

=={sec1-ext3} どうやって人を集めよう？
よし、チーム開発をやってみよう！！と考えも始めることができないのがチーム開発です。
当たり前ですが自分以外の人があってのチーム開発です。

そして人を集めるのは最初の難関でした。僕は内気な所があるので簡単に声を掛けることができませんでした。
最初ににアプローチを方法は何があるのかを洗い出すことにしました。

==== 身近な人に声を掛ける
自分の知っている人に声を掛けるので安心感はあります。
同時に、知っている人だからこそ断られたら気まずい、上手く進まずに開発が中途半端なると気まずくなってしまうのではと考えていました。

==== Twitterで呼びかけ
1番手軽に声を掛けられそうですが、自分の知らない人がくる不安感もありました。

==== 勉強会で知り合った人に声を掛ける
懇親会とかは苦手なのでハードルが高いですが、勉強会に参加していることで勉強に対しての意識は高いであろうとは考えました
@<br>{}

実際に僕が作りたいイメージを共有したほうが、相手もイメージできると考え最初に呼びかけたの勉強会のLTでした。
その結果、Tokiさんが手を挙げてくれました。
直接話したこともありませんでしたが、「楽しそうだからやってみたい！チャンスだと思った」と言ってくれて嬉しい気持ちになったのは思い出します。
このフットワークの軽さは羨ましいです。

1人から2人になると気持ちも前向きになりますね。その勢いのままTwitterで知り合ったつとむさんに声を掛けました。
つとむさんはGitHubの作業も多く、Qiitaにアウトプットをしていたので、信頼度が高かったです。環境構築やインフラ周りの知識がなかったのでぜひ一緒にやって欲しいと声を掛けた所、OKしてもらいました。

ここで思ったのはチャンスだと思った時に飛び込む勇気と目に見えたアウトプットを信用度を高めておくことは大事であることですね。

そして3人でのチーム開発の一歩を踏み出していきました。

=={sec1-ext4} 熱が高いうちに集まって作るものを決めよう
人も集まったのでモチベーションが高いうちに集まり進め方を決めていきました。

==== 目的を決める
1番初めに決めたのはチーム開発の目的です。
目的とは最終的に到達したいこと。つまりチーム開発をして、最終的にどうなりたいかを決めることです。
皆それぞれ考えや、達成したいことが違います。目的がバラバラだと進めべき方向性が決まりません。
そのため、目指すべきゴールを明確化して認識を合わせることは重要です。

僕らもディスカッションしながら目的を決めていきました。
そして下記のような内容が挙がってきました。

 * 仕事ではチーム開発できていないから経験したい
 * モダンな技術をつかってみたい
 * 転職活動などでアピールできる成果物がほしい
 * ０から開発してリリースしたい
 * 会社での経験が外でも通用するかを試してみたい
 * プロダクトを成功させて利益を得たい

最終的には「チーム開発を通して、スキルアップを目指す」ことを目的としました。
ここで学んだことは決め事で大事なのはしっかり決めていくことです。
僕自身も意思決定は得意ではありません。それは責任を取るのが怖いからだと考えます。
そのため、多数決で全てを決めること責任分散したい思いもありました。
ただ進めていくうちに多数決では決めれない状況が発生します。
その時のために発起者として意思決定をして、責任を持つ覚悟は必要だと感じました。

==== 作るものを決めよ
もともと僕が作成していたWordCloudをWebアプリ化しようとなりました。
プロダクト作るモチベーションより、スキル向上に重きを置いていたので技術的幅広く触れるので丁度よい題材になりました。
アプリの概要は勉強会のツイートを集計・分析して、ツイート数やいいね数を可視化することで勉強会の雰囲気や特徴を掴めるようにするものです。
勉強会の特徴を把握することで、初めて参加する時の不安などを軽減して勉強会参加へのハードルを下げること目標としています。

ちなみに現状だとプロトタイプまでは作成できた状態ですが、この表紙を書いて頂いているのなとさんにUIを一新してもらったので作り直そうとしている段階です。

==== 設計を決める
作るものを決めたので、具体的に設計していきました。
ここで上手く設計できなかったことは失敗だと思います。

最初に決めたことはUI部分です。ただUIのデザインセンスがなく、ホワイトボートに書いてもイメージを共有できませんでした。
また、僕が1番作るもののイメージを持っていたにも関わらず、伝えきれませんでした。
そのため、ワイヤーフレームやDBの設計は僕の方で作成していきました。
一通り作成が終わりレビュー依頼をしましたが、詳細なイメージを共有できなかったのでレビューする側も何を確認すればいいのか分からなかったと思います。画面とDB設計を渡されても、何を確認すればいいのか分かりませんし、必要な項目も正しいか判断できません。
もし、これが仕事で時間を費やせれば細かく確認する必要がありますが、プライベートでは時間もそこまで掛けることができません。

こういった状況で僕の設計待ちで皆が手を動かせなくなり、自分がボトルネックになってしまいました。
このままでモチベーションも下がってしまうのでUIモックをだして細かい設計は各自で考えていく流れにしていきました。

とりあえず、手を動かしていけば楽しくなっていくでしょうと考えていました。

=={sec1-ext5} モチベーションを維持することは難しい
決めるものは決めた！！これであとは開発するだけだ！！と考えました。
最初は勢いよく進んでいきましたが、時間が経つにつれてモチベーションも下がっていくのを感じました。
今までの自分ならここで終了していたと思います。しかし今回はチーム開発です。
発起者で誘った身としてそう簡単に投げ出すことはできません。もっと上手くやるにはどうすればいいのかを考える必要がありました。
そこでモチベーションを下がってしまう要因は何であるかを考えました。

==== 金銭的なインセンティブがない
金銭的なインセンティブがないからモチベーションが下がるのでしょうか？
これは科学的には「金銭的報酬は、人の内発的動機づけを低下させる」と結果がでています。
 
 * 内発的動機づけとは活動そのものが目的であること
 * 外発的動機づけとは報酬などの外部からの刺激による動機づけ

今回のプライベート開発では「チーム開発を通して、スキルアップを目指す」を目的としており、内発動機づけです。
そのため、金銭的なインセンティブの要因ではないと考えました。

==== 時間的な制約がある
全員仕事をしています。そのため、チーム開発の作業を行えるのは仕事が終わってからか、土日になっていきます。
僕の生活リズムだと平日は最大2時間、土日も8時間ぐらいの時間を作業の時間になっていました。
もちろん自分の好きな勉強をする時間も考えるともっと少なくなっていきます。
毎日作業ができるわけでもないので、チーム開発にふれる時間が少なくなりモチベーション下がっていきました。

==== タスクがざっくりし過ぎたため、何をしていいか分からない
設計をざっくりしすぎたため、実際に作業する時に何をしていいのかが分かりませんでした。

//image[sec1-ext5-2][タスク説明][scale=0.8]

振り返ってみても投げ方が雑ですよね。僕の頭の中には画面や機能のイメージがありますが、それをチームに落し込めていませんでした。
僕もこのissueがあったら拾って作業しようとは思えないです。何をしていいのかが分からないですからね。
僕は設計書を作り込んでしまう(例えば、バリデーションは何が必要か？DBはどこから取得する必要があるのか？などのレベルまで落とし込む)と、単純作業になってしまい面白くなくなってしますのではと考えていました。

しかし、短い時間で作業を進めていくためにはできるだけ考える作業(設計)と手を動かす作業(実装)は別のフェーズでやる必要があると思いました。

==== スケジュールも立てていなかった
今回はスケジュールを立てませんでした。
理由としては下記となります。

 * 決まった時間を確保できないので工数を立てづらい
 * タスクの内容が把握できないの見積もりを立てられない
 * スケジュールがあるとプレッシャーになるのではないのか

しかし、スケジュールがないので良くも悪くもマイペースになっていきます。
終わりも見えないので、目標が曖昧のままになってしまいました。
スケジュールのプレッシャーを感じることがストレスになると考えていましたが、モチベーション観点で考えると適度なプレッシャーも必要何ではないのかと感じるようになりました。アメとムチのようにモチベーションに関しても安堵と緊張が必要です。
そしてスケジュールがないと振り返ることもできませんでした。
あるタスク対しての振り返りをする際、目標に対してのギャップから気づきを得ることができます。
そして分かりやすい目標はスケジュールだったのだと感じました。

==== タスクが大きすぎる
`多数が大きすぎるとissueをクローズできずに、達成感を感じづらくなってきました。
1issueに対して1〜2週間掛けることもありました。これも設計書を書かなかったからが要因もあります。
実装途中にあれもこれもやらないといけないことが出てきて、タスクが大きくなっていきました。
進捗アウトプットできないので気持ち的にも前に進んでいる感がなくなります。
slack上でもこの時の気持ちを投稿していました。

//image[sec1-ext5-1][ペルソナ][scale=1.0]

==== 作業の熱量が入るタイミングが異なる
それぞれ得意分野やスキルセットが異なっているため、タスクによって作業のスピードが異なっていきます。
例えば僕は環境構築周りに関しては知見がなく、何をやっていいか分からない状態でした。そのため、1からキャッチアップする必要があり、座愛のissueに関わるには時間が掛かります。それなら自分の得意分野をやっていったほうがコミットしている感を持てます。
そういう考えになっていくと環境構築はつとむさんに任せるという空気になり属人化していくようになりました。
これって当初のスキル向上できるのか？という疑問も感じていくようになっていきました。

=={sec1-ext6} モチベーションを上げるための工夫

モチベーションが下がっていくことは分かりました。個人開発していた僕ならここで流れに任せて終わっていたと思いました。
しかし、今回はチーム開発です。僕がやりたいと考え、声を掛け、始めました。簡単に投げ出すことはできません。
発起者としての責任感もはありました。
どうやればモチベーション上げながら、楽しみながら続けれるかを考えていきました。
アプローチを色々あると思います。例えば指揮を上げるために感情に訴えて引っ張ていくスタイルもあると思います。
しかし、今回はオンライン上でのやり取りと時間の制約もあるため感情での指揮は難しいと考えました。
（おそらく僕のスタイルは合わないです。。）

==== README駆動：見た目を豪華にして気分向上
まずは見た目から入ろうと考えました。やはりGitHubを使っているためTOPのREADMEであると考えました。
そのためREADMEは豪華にしていく作成です。図やコントリビュータを入れたりして、対外的にもアピールできるようにしました。
下記図は作成したREADMEです。ドキュメントも一箇所に集めること把握できるようにしていました。

//image[sec1-ext6-1][ペルソナ][scale=0.6]

//image[sec1-ext6-2][ペルソナ][scale=0.6]

//image[sec1-ext6-3][ペルソナ][scale=0.6]

実際に作成したのことで気分は高まりました。
こういうのはモチベーションは長続きするものではないですが、見た目から入ることは大事です。

==== タスクは細かく、小さくする
毎日とはいわないですが、できる限り少しでも作業してもらうようにissueは細かく分割するようになりました。
これによりissueの作成は急激多くなりました。何かしら作業する場合はissueを作成してから作業するフローにもしました。
これをするようになり、一日で終わるようになっていきました。

==== 前に進んでいることを感じよう
エンジニアのモチベーションはGitHubに草を生やすこともあるだろうと思います。
できるだけコントリビュートを増やせるような状態にしました。
コントリビュートはissueやプルリクの作成で生やすことができます。
そのため、細かくissueとプルリクを出すように心がけていきました。
これをすることで僕は下記のような感じでコンスタントに作業することができるようになりました。
とにかく週間づくりができる工夫が大事であると感じました。

また、issueとプルリクは細かくなったことで確認する人も負担も減るようになっていきました。

==== Twitterに発信していこう
アウトプットしていることもモチベーションになると考えました。
手軽なアウトプットはtwitterだと考えました。開発用のtwitterを取得していたので、そのアカウントで発信していこうと考えました。
ただ、手動での運用は負担も増えますし、続かなくなることは目に見えて分かりました。
そのため、下記のようなツールを作成しました

 * GitHubでプルリクをマージした際にツイートする
 * slackで特定のリアクションをつけたらツイートする

実際の画面は下記のような形です。

下記のような感想ももらいました。

 * ツイ廃なのですぐにマージされたことが分かるようになりました。
 * 継続的ツイートをすることで、自分含め他の人の活動がはっきり見える化するので、良い刺激にもなります。
 * githubなどを見ている開発者モードのときじゃなくても、Twitterで通知を見られる。それぞれ、開発に時間を使えるタイミングや量が違い、ほぼ完全にリモートで作業しているチームでのコミュニケーションロスによる摩擦を減らせる。

作成したツールについてQiitaに記載しているので詳細を知りたいかはご確認いただければです。

=={sec-ext7} プライベートのチーム開発はたのしい
開発スピートはゆっくりながらも数ヶ月チーム開発をやってきて思ったのは楽しかったです。
プライベートでやっているので楽しくなければ続かないです。そしてこの楽しい感覚を続けていくために皆で努力していく必要があることです。

==== 皆で決めていく流れが楽しい
チームだと決め毎に対して、意見を出し合って決めていきます。
それぞれの意見を出し合いディスカッションして、ベスト・ベターを探していく過程は個人では味わえてので楽しかったです。

==== 仕組みを０から構築できて楽しい
GitHubのissueでタスク管理、プルリクのマージは他の人にしてもらうなどのルールを0から作っていきました。
仕事でもチームの仕組みを0ベースから作る過程に携わることができることは少ないです。
各人の今までの経験・知識をだしあって、チームの仕組みづくりをできたことは楽しかったです。

==== 自分の知らない技術を知ることが楽しい
人のコードを見ることやレビューしてもらうことで技術スキルはアップしていきます。
特に１人だともっと良い書き方があるのではと考えてしまいますが、見てもらうことでアドバイスを貰ううことができました。
また、そもそも知らない分野だとそもそも何ができるのかが分かりません。
今回、環境構築まわりをつとむさんに作成してもらいましたが、bashによる環境の自動作成やDockerによる管理は僕はまったく分かっていませんでした。
こういった事を実践ベースで知っていくことができるのは楽しかったです。

==== 課題が見つかって解決する過程が楽しい
何でもそうですが、進めていくうちに課題は見つかっていきます。
今回だと環境構築をもっと楽にした、タスクをもっと見える化したい、気軽にアウトプットできるようにしたいなどが挙がっていきました。
それを皆で一つ一つ解決して良くなっていくことは楽しかったです。

=={sec-ext8} まとめ
最後にチーム開発をやってみて、個人開発の違いを挙げていきます。

==== モチベーション
個人開発では下がった時に他の人に迷惑も掛けないのでそのまま諦めやすいです。

チーム開発では自分のモチベーションが下がった時に周りの人が活動を見るとやる気になっていきます。
さらに途中で投げ出すと周りの人に迷惑を掛けてしまうので、諦めづらくなりました。

しかし、一度離れてしまい開発がどんどん進んでしますと戻りづらくなってしまうこともあります。

==== 開発の自由度
個人開発もチーム開発もどちらも自由度は高かったです。

==== 開発のスピード
１人で全部できるならば個人開発のほうが開発スピードは早くなると感じました。
チーム開発では決定に時間が掛かったり、他の人の進捗で待ちが発生してしまうので、１人のほうが早く完了する可能性はあります。

==== スキル向上
チーム開発ではレビュー等で指摘してもらえるのでスキルは向上できると思いました。
ただ、属人化もしやすいと自分の知っていることしか担当しなくなり知らない技術に対してのスキルは向上しなくなりそうです。

