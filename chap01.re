= プライベートでのチーム開発は想像以上に難しかった

//flushright{
なおと（@naoto_7713）
//}

=={sec1-ext1} はじめに
皆さんはプライベートでチーム開発をやったことはありますか。

 * やったことがある人は個人開発との違いはどう感じましたか？
 * やったことがない人はチーム開発をやってみたいと思いますか？

僕はプライベートでチーム開発することに対して憧れを持っていました。チーム開発ならばモチベーションも保てて、スキルアップも早くなるのではと考えていました。そして2019年2月からプライベートでチーム開発を始めることにしました。

0からチーム開発を始めるにあたって、正直何をすればいいのか分かりませんでした。ただ、仕事でもチーム開発をしているため、同じ要領で進めていけば上手くいくだろうとぼんやりと考えていました。

しかし、実際に始めると次のような課題が沢山でてきました。
 
 * 最初に決めておくべきことが分からない
 * まとまった時間が取れず中々進まない
 * 設計書って作ったほうがいいの？
 * 皆のモチベーションが下がっている！？

Googleで「チーム開発 進め方」と調べても０から体系的に始めていく方法はありませんでした。そのような中で、手探りで始めていったチーム開発ですが、上手くいったこと、上手くいかなかったこと沢山あります。

そこで本章では僕の感情面にフォーカスして実際にプライベートでチーム開発やってみてどうだったかについて振り返っていきます。

僕が経験したチーム開発の雰囲気が伝われば嬉しいです。

===== 本章で伝えること

 * なぜ始めようと思ったのか
 * チーム開発はどこが難しかったのか
 * どうやってチーム開発を進めていったのか
 * チーム開発だからといってモチベーションは保てるわけでない
 * モチベーションを上げていくための工夫
 * プライベートでチーム開発をする楽しさ
 * 個人開発とチーム開発の違い

===== 本章で伝えないこと

 * 体系化したチーム開発の進め方(2章、3章)
 * 使用したツールの紹介(4章)
 * 環境構築(5章)

=={sec1-ext2} チーム開発をやりたい！！と思ったきっかけ
そもそもプライベートでチーム開発をやってみたいと思った理由はいくつかあります。

==== 楽しそう
１人のほうが気楽に自分のペースで進めることができますが、孤独を感じることもあります。皆でワイワイ話し合い目標に向かっていくことが楽しそうだと感じていました。

==== スキル向上できそう
皆さんは自分が考えた設計や実装が本当に正しいのだろうか？もっと良い書き方があるのではないか？と考えたことはありませんか。僕はよくあります。
こういう時にレビューしてくれる人がいれば、もっとスキルアップするのではないかと考えてました。

==== チームを0から作ることを体験してみたい
仕事でもチーム開発をしていますが、いわゆる0からチームを作成したことはありません。
基本的に僕はチームが既にできあがっている状態で参加することが多かったです。

僕は個人事業主で常駐して手を動かすエンジニアをしているので、チームリーダを経験する機会が少ないです。そのため、人も仕組みも全く存在しない状態からチームを作ってみることを経験したかったです。

==== 自分のスキルや経験が通用するかを確認したい
僕は特定の会社やチームではなく幅広い場所で役に立つスキル・キャリアを得たいと考えています。僕の今までの経験が現場の外でも通用するのかを確認してみたかったです。

==== モチベーションが続きそう
幾度となく挫折していった個人開発の数々。
Webアプリを作成したいと考えてもやることが沢山あります。

 * アプリ内容の設計
 * 画面設計、DB設計
 * フロント実装
 * バックエンド実装
 * インフラ周りの構築

最初は熱が高くても、時間とともに下がっていきます。
できるだけ早く形にしたいですが、初めての技術はキャッチアップに時間が掛かります。キャッチアップに時間が掛かると、プロダクトの進捗がでない。そしてモチベーションが下がるというサイクルに陥り、気づいたら最初は燃え上がっていた熱もどこかに消えていました。
良くも悪くも、個人開発は途中で投げ出したとしても誰にも迷惑が掛かりません。そこに甘えて僕はすぐに投げ出す癖がついてました。

こういった事が個人開発で発生していたので、他の人も巻き込んで諦めづらい環境を作って強制的にモチベーションを上げたいと考えていました。

=={sec1-ext3} どうやって人を集めよう？
よし、チーム開発をやってみよう！！と考えても始めることができないのがチーム開発です。
当たり前ですが自分以外の人がいなければチームにはなりません。では、人を集めようと考えますが、ここが最初の難関でした。

そもそも僕は内向的な面があるので簡単に声を掛けるなんと恐れ多いです。
断られたらどうしよう。何も決まっていないのに誘ったら迷惑では。と考えてしまい行動に移せませんでした。

しかし、行動しなければ何も始まらないのも事実です。
漫然とした不安を断ち切るため、最初にどんなアプローチがあるかを書き出していきました。

==== 身近な人に声を掛ける
これは自分の知っている人に声を掛けるので安心感はあります。
同時に、知っている人だからこそ断られたら気まずくなる。上手く開発が進まずに中途半端なってしまい気まずくなる可能性もあると考えていました。

==== Twitterで呼びかけ
Twitterで「プライベートでチーム開発をやってみた人募集します！！」と声を掛ける方法もありそうです。これは1番手軽に声を掛けられそうですが、自分の知らない人から返信がくる可能性もあります。

==== 勉強会で声を掛ける
僕はちょくちょく勉強会に参加していたので、そこで声を掛ける方法もあります。
勉強会に参加している人はスキルアップに対して意識が高いので、いい刺激になりそうです。しかし、いきなりチーム開発しませんか？と声を掛けると怪しさがでるので、コミュニケーション力が求められそうです。
@<br>{}

いくつかアプローチを考えた結果、最初に呼びかけたのは勉強会のLTです。
LTでは「プライベートで一緒に開発をやりたい人いませんかと？」と問いかけました。勉強会参加者というフィルターを掛け、さらに多数に対してpush型でアピールしたので心理的には楽でした。

その結果、Tokiさんが声を掛けてくれました。
直接話したこともありませんでしたが、「楽しそうだからやってみたい！チャンスだと思った」と言ってくれて嬉しい気持ちになったのは思い出します。
そして1人から2人になると気持ち大きくなっていきますね。
その勢いのままTwitterで知り合ったつとむさんにも声を掛けていきます。
つとむさんはGitHubやQiitaに積極的にアウトプットをしています。
僕もツイートを見ていたので、一緒に開発ができたら楽しいだろうと思い、声を掛けた所、OKしてもらいました。

Tokiさんとつとむさんを見て感じたことはチャンスだと思った時に飛び込む勇気と目に見えたアウトプット行い信用度を高めておくことは大事であることです。

そして3人でのチーム開発の一歩を踏み出していきました。

=={sec1-ext4} 熱が高いうちに集まって作るものを決めよう
鉄は熱いうちに打って打って打ちまくるのがいいので、すぐに対面で集まり進め方を決めていくことにしました。

==== 目的を決める
僕は皆に「チーム開発してみませんか？」と声を掛けていました。つまり何のためチーム開発をし、どこを目指すのかを伝えていません。それぞれでチーム開発に求めることがバラバラな状態です。
しかし、プライベードで時間を費やすからには、皆が成長できる環境を作りたいです。
そのため、皆が何をやっていきたいかを明確にし、それをできる環境作りをするための一環としてチーム開発の目的を決めました。

実際に下記のことが挙がってきました。

 * 仕事ではチーム開発できていないから経験したい
 * モダンな技術をつかってみたい
 * 転職活動などでアピールできる成果物がほしい
 * ０から開発してリリースしたい
 * 会社での経験が外でも通用するかを試してみたい
 * プロダクトを成功させて利益を得たい

どの内容もいい目的です。しかし、複数の目的を混在すると軸がブレる可能性もあります。例えば技術選定を考えるとしましょう。転職活動などでアピールできる成果物がほしいを目的とした場合、転職活動で有利な技術を選択することになります。反対にモダンな技術を使ってみたいを目的とした場合、業務ではあまり使われていないが自分たちが触ってみたい技術を選択することも可能になります。

目的は複数あってもよいですが優先度を付けて、できるだけシンプルにするべきだと考えています。そして、僕たちのチーム開発の目的は「チーム開発を通して、技術のスキルアップを目指す」にしました。技術が好きなザ・エンジニアの集まりですね。

==== 作るものを決めよ
もともと僕が作成していたWordCloudをWebアプリ化する構想はありました。
プロダクトを作るモチベーションより、スキル向上に重きを置いていたので特に異論もなく決まりました。

少しだけアプリ説明をすると勉強会のツイートを集計・分析して、可視化することで勉強会の雰囲気や特徴を掴めるようにするものです。
勉強会の特徴を把握することで、初めて参加する時の不安などを減らし、勉強会への参加ハードルを下げること目的としたものです。現状だとプロトタイプまでは作成できた状態ですが、UIは一新して作り直そうと考えています。

==== 設計を決める
最初に決めたことはUI部分です。画面から考えていくのが１番イメージしやすいと思ったからです。
しかし、デザインスキルが皆無の僕にはUIを書くことができませんでした。さらにアプリの機能イメージも僕の中の考えを皆に伝えきれていません。
そのため、画面のワイヤーフレームとDBの設計は僕が作成していきました。

しかし機能一覧も考えずに付け焼き刃で作成しているので、設計にも時間が掛かります。作業分担もできずに皆は待ちの状態が続き、自分がボトルネックなっていることは感じていました。このままではモチベーションが下がってしますので、設計はほどほどにして実装と一緒に仕様・設計を考えてもらう方針に変更しました。

コードを書いて手を動かせばモチベーションも上がるはずだとこの時は思っていました。

=={sec1-ext5} モチベーションを維持することは難しい
手を動かしてコードを書き始めればモチベーションも続くだろうと思っていました。確かに最初は勢いよく進んでいきました。しかし２週間も経つと、自分含め皆のモチベーションも下がっているのを感じてきました。
モチベーションを上げるのは大変ですし、プライベート何だから無理して続ける必要ない。今までの自分ならここで諦めていたと思います。

しかし今回はチーム開発です。発起者の自分が皆に声を掛けて誘っています。責任感も感じているので、簡単には投げ出すことはできませんでした。
もっと上手くやるにはどうすればいいのかを考える必要があります。そこでモチベーションを下がってしまう要因は何であるかを考えることにしました。

==== 金銭的なインセンティブがない
金銭的なインセンティブがないからモチベーションが下がるのではないか？
しかし科学的に「金銭的報酬は、人の内発的動機づけを低下させる」と結果がでています。
 
 * 内発的動機づけとは活動そのものが目的であること
 * 外発的動機づけとは報酬などの外部からの刺激による動機づけ

今回のプライベート開発では「チーム開発を通して、スキルアップを目指す」を目的としており、内発動機づけです。最初からお金を目的にしてはいなかったので、金銭的なインセンティブがないからモチベーションが下がっているわけではありませんでした。

==== 時間的な制約がある
メンバー全員仕事をしています。そのため、チーム開発の作業を行えるのは仕事が終わった後の平日よるか、土日になっていきます。
僕の生活リズムだと平日は最大1時間、土日も8時間程の時間を作業に充てられました。自分の好きな勉強や仕事で必要な勉強も考慮に入れるともっと少なくなります。もちろん、毎日作業ができるわけではありません。チーム開発に触れる時間が少ないほど、熱も冷めていきます。

==== タスクがざっくりし過ぎたため、何をしていいか分からない
いざ、作業を始めるぞ！！と思っても、何をすればいいのかが分かりませんでした。実際に作成していたissueが次の画像となります。

//image[sec1-ext5-2][作成したissue][scale=0.9]

これを見てすぐに実装を進めれるでしょうか？「自由にいい感じにしてください」は曖昧すぎて、何をすればいいのかが分かりません。仕事が終わった平日の夜に考える作業は疲れもあり、気乗りがしませんでした。

短い時間で作業を進めていくためにはできるだけ考える作業(設計)と手を動かす作業(実装)を分けるべきだと感じています。

==== スケジュールも立てていなかった
今回はスケジュールを立てませんでした。
理由としては次となります。

 * 決まった時間を確保できないので工数を立てづらい
 * タスクの内容が把握できないの見積もりを立てられない
 * スケジュールがあるとプレッシャーになるのではないのか

期限があると少なからずプレッシャーを感じます。そういった中だと楽しく進めることができなくなるのでは考えていましたが、期限がないことで気も緩んでしまいます。
例えば、設計作業を2週間で終わらせるスケジュール引いたと考えてみましょう。そうすると、2週間目で終わっているためには1週間目ではここまで完了していないといけない、3日目の進捗でこのタスクを終わらせなければならない。と逆算して計画をしていきます。
しかし、スケジュールがないと逆算しての計画ができません。目標なき作業は意義が見出しづらくなってしまいモチベーションも上がりづらくなります。

さらに、スケジュールを立てないと振り返りができなくなります。
この作業によっては早く終わること、遅くなってしまうことが多々あります。
この時の目標からのギャップが振り返りをするポイントになります。
目標を立てずにいるとギャップがなくなり、良かった点、悪かった点を感じづらくなります。
スケジュールは予定の管理だけではなく、作業の振り返りをできるようにするために必要でした。

==== タスクが大きすぎる
１つのタスクが大きすぎると完了するまでに時間が掛かり、達成感を感じづらくなります。
タスクがざっくりしていたので、実装途中に機能がどんどん膨れ上がってしまいました。
進捗をアウトプットできないので前に進んでいる感がなくなります。slackでも次のような投稿をしていました。

//image[sec1-ext5-1][ペルソナ][scale=1.0]

==== 属人化してしまう
メンバー全員、得意分野やスキルセットが異なるため、タスクによって作業スピードが違います。
例えば僕は環境構築周りに関しては知見がないので、キャッチアップする必要があります。
反対につとむさんは環境構築周りの作業が得意なので、タスクをすぐに完了させることができます。
チーム開発だと自分の作業がクリティカルパスとなり、全体の作業が止まってしまうことがあります。自分だと時間が掛かるので得意な人にやってもらうという空気が生まれてきます。つまり属人化です。

僕らはスキル向上を目的にしていたはずなのに、いつしか自分のできることだけをやるようになっていました。

=={sec1-ext6} モチベーションを上げるための工夫

モチベーションが下がっていくことは分かりました。個人開発していた僕ならここで流れに任せて終わっていたと思いました。
しかし、今回はチーム開発です。僕がやりたいと考え、声を掛け、始めました。簡単に投げ出すことはできません。
発起者としての責任感もはありました。
どうやればモチベーション上げながら、楽しみながら続けれるかを考えていきました。
アプローチを色々あると思います。例えば指揮を上げるために感情に訴えて引っ張ていくスタイルもあると思います。
しかし、今回はオンライン上でのやり取りと時間の制約もあるため感情での指揮は難しいと考えました。
（おそらく僕のスタイルは合わないです。。）

==== README駆動：見た目を豪華にして気分向上
まずは見た目から入ろうと考えました。やはりGitHubを使っているためTOPのREADMEであると考えました。
そのためREADMEは豪華にしていく作成です。図やコントリビュータを入れたりして、対外的にもアピールできるようにしました。
下記図は作成したREADMEです。ドキュメントも一箇所に集めること把握できるようにしていました。

//image[sec1-ext6-1][ペルソナ][scale=0.6]

//image[sec1-ext6-2][ペルソナ][scale=0.6]

//image[sec1-ext6-3][ペルソナ][scale=0.6]

実際に作成したのことで気分は高まりました。
こういうのはモチベーションは長続きするものではないですが、見た目から入ることは大事です。

==== タスクは細かく、小さくする
毎日とはいわないですが、できる限り少しでも作業してもらうようにissueは細かく分割するようになりました。
これによりissueの作成は急激多くなりました。何かしら作業する場合はissueを作成してから作業するフローにもしました。
これをするようになり、一日で終わるようになっていきました。

==== 前に進んでいることを感じよう
エンジニアのモチベーションはGitHubに草を生やすこともあるだろうと思います。
できるだけコントリビュートを増やせるような状態にしました。
コントリビュートはissueやプルリクの作成で生やすことができます。
そのため、細かくissueとプルリクを出すように心がけていきました。
これをすることで僕は下記のような感じでコンスタントに作業することができるようになりました。
とにかく週間づくりができる工夫が大事であると感じました。

また、issueとプルリクは細かくなったことで確認する人も負担も減るようになっていきました。

==== Twitterに発信していこう
アウトプットしていることもモチベーションになると考えました。
手軽なアウトプットはtwitterだと考えました。開発用のtwitterを取得していたので、そのアカウントで発信していこうと考えました。
ただ、手動での運用は負担も増えますし、続かなくなることは目に見えて分かりました。
そのため、下記のようなツールを作成しました

 * GitHubでプルリクをマージした際にツイートする
 * slackで特定のリアクションをつけたらツイートする

実際の画面は下記のような形です。

下記のような感想ももらいました。

 * ツイ廃なのですぐにマージされたことが分かるようになりました。
 * 継続的ツイートをすることで、自分含め他の人の活動がはっきり見える化するので、良い刺激にもなります。
 * githubなどを見ている開発者モードのときじゃなくても、Twitterで通知を見られる。それぞれ、開発に時間を使えるタイミングや量が違い、ほぼ完全にリモートで作業しているチームでのコミュニケーションロスによる摩擦を減らせる。

作成したツールについてQiitaに記載しているので詳細を知りたいかはご確認いただければです。

=={sec-ext7} プライベートのチーム開発はたのしい
開発スピートはゆっくりながらも数ヶ月チーム開発をやってきて思ったのは楽しかったです。
プライベートでやっているので楽しくなければ続かないです。そしてこの楽しい感覚を続けていくために皆で努力していく必要があることです。

==== 皆で決めていく流れが楽しい
チームだと決め毎に対して、意見を出し合って決めていきます。
それぞれの意見を出し合いディスカッションして、ベスト・ベターを探していく過程は個人では味わえてので楽しかったです。

==== 仕組みを０から構築できて楽しい
GitHubのissueでタスク管理、プルリクのマージは他の人にしてもらうなどのルールを0から作っていきました。
仕事でもチームの仕組みを0ベースから作る過程に携わることができることは少ないです。
各人の今までの経験・知識をだしあって、チームの仕組みづくりをできたことは楽しかったです。

==== 自分の知らない技術を知ることが楽しい
人のコードを見ることやレビューしてもらうことで技術スキルはアップしていきます。
特に１人だともっと良い書き方があるのではと考えてしまいますが、見てもらうことでアドバイスを貰ううことができました。
また、そもそも知らない分野だとそもそも何ができるのかが分かりません。
今回、環境構築まわりをつとむさんに作成してもらいましたが、bashによる環境の自動作成やDockerによる管理は僕はまったく分かっていませんでした。
こういった事を実践ベースで知っていくことができるのは楽しかったです。

==== 課題が見つかって解決する過程が楽しい
何でもそうですが、進めていくうちに課題は見つかっていきます。
今回だと環境構築をもっと楽にした、タスクをもっと見える化したい、気軽にアウトプットできるようにしたいなどが挙がっていきました。
それを皆で一つ一つ解決して良くなっていくことは楽しかったです。

=={sec-ext8} まとめ
最後にチーム開発をやってみて、個人開発の違いを挙げていきます。

==== モチベーション
個人開発では下がった時に他の人に迷惑も掛けないのでそのまま諦めやすいです。

チーム開発では自分のモチベーションが下がった時に周りの人が活動を見るとやる気になっていきます。
さらに途中で投げ出すと周りの人に迷惑を掛けてしまうので、諦めづらくなりました。

しかし、一度離れてしまい開発がどんどん進んでしますと戻りづらくなってしまうこともあります。

==== 開発の自由度
個人開発もチーム開発もどちらも自由度は高かったです。

==== 開発のスピード
１人で全部できるならば個人開発のほうが開発スピードは早くなると感じました。
チーム開発では決定に時間が掛かったり、他の人の進捗で待ちが発生してしまうので、１人のほうが早く完了する可能性はあります。

==== スキル向上
チーム開発ではレビュー等で指摘してもらえるのでスキルは向上できると思いました。
ただ、属人化もしやすいと自分の知っていることしか担当しなくなり知らない技術に対してのスキルは向上しなくなりそうです。

==== 意思決定
覚悟して、責任をおって決める